<!DOCTYPE html>
<!-- Created with https://studio.penguinmod.com/PenguinMod-Packager/ -->
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <!-- We only include this to explicitly loosen the CSP of various packager environments. It does not provide any security. -->
  <meta http-equiv="Content-Security-Policy" content="default-src * 'self' 'unsafe-inline' 'unsafe-eval' data: blob:">
  <title>YouTube+</title>
  <style>
    body {
      color: #ffffff;
      font-family: sans-serif;
      overflow: hidden;
      margin: 0;
      padding: 0;
    }
    :root, body.is-fullscreen {
      background-color: #000000;
    }
    [hidden] {
      display: none !important;
    }
    h1 {
      font-weight: normal;
    }
    a {
      color: inherit;
      text-decoration: underline;
      cursor: pointer;
    }

    #app, #loading, #error, #launch {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }
    .screen {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      text-align: center;
      cursor: default;
      user-select: none;
      -webkit-user-select: none;
      background-color: #000000;
    }
    #launch {
      background-color: rgba(0, 0, 0, 0.7);
      cursor: pointer;
    }
    .green-flag {
      width: 80px;
      height: 80px;
      padding: 16px;
      border-radius: 100%;
      background: rgba(255, 255, 255, 0.75);
      border: 3px solid hsla(0, 100%, 100%, 1);
      display: flex;
      justify-content: center;
      align-items: center;
      box-sizing: border-box;
    }
    #loading {
      
    }
    .progress-bar-outer {
      border: 1px solid currentColor;
      height: 10px;
      width: 200px;
      max-width: 200px;
    }
    .progress-bar-inner {
      height: 100%;
      width: 0;
      background-color: currentColor;
    }
    .loading-text, noscript {
      font-weight: normal;
      font-size: 36px;
      margin: 0 0 16px;
    }
    .loading-image {
      margin: 0 0 16px;
    }
    #error-message, #error-stack {
      font-family: monospace;
      max-width: 600px;
      white-space: pre-wrap;
      user-select: text;
      -webkit-user-select: text;
    }
    #error-stack {
      text-align: left;
      max-height: 200px;
      overflow: auto;
    }
    .control-button {
      width: 2rem;
      height: 2rem;
      padding: 0.375rem;
      margin-top: 0.5rem;
      margin-bottom: 0.5rem;
      user-select: none;
      -webkit-user-select: none;
      cursor: pointer;
      border: 0;
      border-radius: 4px;
    }
    .control-button:hover {
      background: #ff000026;
    }
    .control-button.active {
      background: #ff000059;
    }
    .fullscreen-button {
      background: white !important;
    }
    .standalone-fullscreen-button {
      position: absolute;
      top: 0;
      right: 0;
      background-color: rgba(0, 0, 0, 0.5);
      border-radius: 0 0 0 4px;
      padding: 4px;
      cursor: pointer;
    }
    .sc-canvas {
      cursor: auto;
    }
    .sc-monitor-root[data-opcode^="data_"] .sc-monitor-value-color {
      background-color: #ff1a1a;
    }
    .sc-monitor-row-value-outer {
      background-color: #fc662c;
    }
    .sc-monitor-row-value-editing .sc-monitor-row-value-outer {
      background-color: #e25b27;
    }
    
  </style>
  <meta name="theme-color" content="#000000">
  
</head>
<body>
  <div id="app"></div>

  <div id="launch" class="screen" hidden title="Click to start">
    <div class="green-flag">
      <svg viewBox="0 0 16.63 17.5" width="42" height="44">
        <defs><style>.cls-1,.cls-2{fill:#007AF4;stroke:#003080;stroke-linecap:round;stroke-linejoin:round;}.cls-2{stroke-width:1.5px;}</style></defs>
        <path class="cls-1" d="M.75,2A6.44,6.44,0,0,1,8.44,2h0a6.44,6.44,0,0,0,7.69,0V12.4a6.44,6.44,0,0,1-7.69,0h0a6.44,6.44,0,0,0-7.69,0"/>
        <line class="cls-2" x1="0.75" y1="16.75" x2="0.75" y2="0.75"/>
      </svg>
    </div>
  </div>

  <div id="loading" class="screen">
    <noscript>Enable JavaScript</noscript>
    <h1 class="loading-text">Loading</h1>
    
    <div class="progress-bar-outer"><div class="progress-bar-inner" id="loading-inner"></div></div>
  </div>

  <div id="error" class="screen" hidden>
    <h1>Error</h1>
    <details>
      <summary id="error-message"></summary>
      <p id="error-stack"></p>
    </details>
  </div>

  <script>/*!
Parts of this script are from the PenguinMod Packager <https://studio.penguinmod.com/PenguinMod-Packager/>, licensed as follows:
Copyright (C) 2021-2022 Thomas Weber

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Parts of this script are from Scratch <https://scratch.mit.edu/>, licensed as follows:
Copyright (c) 2016, Massachusetts Institute of Technology
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

!function(A){function e(e){for(var t,i,r=e[0],s=e[1],o=0,B=[];o<r.length;o++)i=r[o],Object.prototype.hasOwnProperty.call(n,i)&&n[i]&&B.push(n[i][0]),n[i]=0;for(t in s)Object.prototype.hasOwnProperty.call(s,t)&&(A[t]=s[t]);for(a&&a(e);B.length;)B.shift()()}var t={},n={0:0};function i(e){if(t[e])return t[e].exports;var n=t[e]={i:e,l:!1,exports:{}};return A[e].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.e=function(A){var e=[],t=n[A];if(0!==t)if(t)e.push(t[2]);else{var r=new Promise((function(e,i){t=n[A]=[e,i]}));e.push(t[2]=r);var s,o=document.createElement("script");o.charset="utf-8",o.timeout=120,i.nc&&o.setAttribute("nonce",i.nc),o.src=function(A){return i.p+"scaffolding/"+({1:"vendors~iframe-extension-worker"}[A]||A)+".js"}(A);var a=new Error;s=function(e){o.onerror=o.onload=null,clearTimeout(B);var t=n[A];if(0!==t){if(t){var i=e&&("load"===e.type?"missing":e.type),r=e&&e.target&&e.target.src;a.message="Loading chunk "+A+" failed.\n("+i+": "+r+")",a.name="ChunkLoadError",a.type=i,a.request=r,t[1](a)}n[A]=void 0}};var B=setTimeout((function(){s({type:"timeout",target:o})}),12e4);o.onerror=o.onload=s,document.head.appendChild(o)}return Promise.all(e)},i.m=A,i.c=t,i.d=function(A,e,t){i.o(A,e)||Object.defineProperty(A,e,{enumerable:!0,get:t})},i.r=function(A){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(A,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(A,"__esModule",{value:!0})},i.t=function(A,e){if(1&e&&(A=i(A)),8&e)return A;if(4&e&&"object"==typeof A&&A&&A.__esModule)return A;var t=Object.create(null);if(i.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:A}),2&e&&"string"!=typeof A)for(var n in A)i.d(t,n,function(e){return A[e]}.bind(null,n));return t},i.n=function(A){var e=A&&A.__esModule?function(){return A.default}:function(){return A};return i.d(e,"a",e),e},i.o=function(A,e){return Object.prototype.hasOwnProperty.call(A,e)},i.p="",i.oe=function(A){throw console.error(A),A};var r=window.webpackJsonp=window.webpackJsonp||[],s=r.push.bind(r);r.push=e,r=r.slice();for(var o=0;o<r.length;o++)e(r[o]);var a=s;i(i.s=627)}([function(A,e,t){"use strict";t.r(e),t.d(e,"ACESFilmicToneMapping",(function(){return eA})),t.d(e,"AddEquation",(function(){return F})),t.d(e,"AddOperation",(function(){return Z})),t.d(e,"AdditiveAnimationBlendMode",(function(){return ye})),t.d(e,"AdditiveBlending",(function(){return I})),t.d(e,"AlphaFormat",(function(){return RA})),t.d(e,"AlwaysCompare",(function(){return Qt})),t.d(e,"AlwaysDepth",(function(){return j})),t.d(e,"AlwaysStencilFunc",(function(){return rt})),t.d(e,"AmbientLight",(function(){return YE})),t.d(e,"AmbientLightProbe",(function(){return LE})),t.d(e,"AnimationAction",(function(){return uQ})),t.d(e,"AnimationClip",(function(){return Zg})),t.d(e,"AnimationLoader",(function(){return rE})),t.d(e,"AnimationMixer",(function(){return wQ})),t.d(e,"AnimationObjectGroup",(function(){return lQ})),t.d(e,"AnimationUtils",(function(){return Hg})),t.d(e,"ArcCurve",(function(){return Ac})),t.d(e,"ArrayCamera",(function(){return ma})),t.d(e,"ArrowHelper",(function(){return ol})),t.d(e,"Audio",(function(){return eQ})),t.d(e,"AudioAnalyser",(function(){return oQ})),t.d(e,"AudioContext",(function(){return JE})),t.d(e,"AudioListener",(function(){return AQ})),t.d(e,"AudioLoader",(function(){return jE})),t.d(e,"AxesHelper",(function(){return al})),t.d(e,"BackSide",(function(){return u})),t.d(e,"BasicDepthPacking",(function(){return be})),t.d(e,"BasicShadowMap",(function(){return c})),t.d(e,"Bone",(function(){return uB})),t.d(e,"BooleanKeyframeTrack",(function(){return Lg})),t.d(e,"Box2",(function(){return UQ})),t.d(e,"Box3",(function(){return Fn})),t.d(e,"Box3Helper",(function(){return tl})),t.d(e,"BoxBufferGeometry",(function(){return cl})),t.d(e,"BoxGeometry",(function(){return Sr})),t.d(e,"BoxHelper",(function(){return el})),t.d(e,"BufferAttribute",(function(){return _i})),t.d(e,"BufferGeometry",(function(){return ur})),t.d(e,"BufferGeometryLoader",(function(){return RE})),t.d(e,"ByteType",(function(){return mA})),t.d(e,"Cache",(function(){return qg})),t.d(e,"Camera",(function(){return jr})),t.d(e,"CameraHelper",(function(){return qQ})),t.d(e,"CanvasTexture",(function(){return _B})),t.d(e,"CapsuleBufferGeometry",(function(){return gl})),t.d(e,"CapsuleGeometry",(function(){return Mc})),t.d(e,"CatmullRomCurve3",(function(){return sc})),t.d(e,"CineonToneMapping",(function(){return AA})),t.d(e,"CircleBufferGeometry",(function(){return El})),t.d(e,"CircleGeometry",(function(){return pc})),t.d(e,"ClampToEdgeWrapping",(function(){return cA})),t.d(e,"Clock",(function(){return KE})),t.d(e,"Color",(function(){return ji})),t.d(e,"ColorKeyframeTrack",(function(){return Pg})),t.d(e,"ColorManagement",(function(){return rn})),t.d(e,"CompressedArrayTexture",(function(){return ZB})),t.d(e,"CompressedTexture",(function(){return XB})),t.d(e,"CompressedTextureLoader",(function(){return sE})),t.d(e,"ConeBufferGeometry",(function(){return Ql})),t.d(e,"ConeGeometry",(function(){return Fc})),t.d(e,"CubeCamera",(function(){return Lr})),t.d(e,"CubeReflectionMapping",(function(){return iA})),t.d(e,"CubeRefractionMapping",(function(){return rA})),t.d(e,"CubeTexture",(function(){return Pr})),t.d(e,"CubeTextureLoader",(function(){return aE})),t.d(e,"CubeUVReflectionMapping",(function(){return aA})),t.d(e,"CubicBezierCurve",(function(){return cc})),t.d(e,"CubicBezierCurve3",(function(){return gc})),t.d(e,"CubicInterpolant",(function(){return vg})),t.d(e,"CullFaceBack",(function(){return o})),t.d(e,"CullFaceFront",(function(){return a})),t.d(e,"CullFaceFrontBack",(function(){return B})),t.d(e,"CullFaceNone",(function(){return s})),t.d(e,"Curve",(function(){return qB})),t.d(e,"CurvePath",(function(){return Cc})),t.d(e,"CustomBlending",(function(){return m})),t.d(e,"CustomToneMapping",(function(){return tA})),t.d(e,"CylinderBufferGeometry",(function(){return ll})),t.d(e,"CylinderGeometry",(function(){return mc})),t.d(e,"Cylindrical",(function(){return fQ})),t.d(e,"Data3DTexture",(function(){return wn})),t.d(e,"DataArrayTexture",(function(){return un})),t.d(e,"DataTexture",(function(){return hB})),t.d(e,"DataTextureLoader",(function(){return BE})),t.d(e,"DataUtils",(function(){return Ki})),t.d(e,"DecrementStencilOp",(function(){return Ke})),t.d(e,"DecrementWrapStencilOp",(function(){return Ze})),t.d(e,"DefaultLoadingManager",(function(){return AE})),t.d(e,"DepthFormat",(function(){return HA})),t.d(e,"DepthStencilFormat",(function(){return kA})),t.d(e,"DepthTexture",(function(){return fa})),t.d(e,"DirectionalLight",(function(){return DE})),t.d(e,"DirectionalLightHelper",(function(){return XQ})),t.d(e,"DiscreteInterpolant",(function(){return jg})),t.d(e,"DisplayP3ColorSpace",(function(){return Le})),t.d(e,"DodecahedronBufferGeometry",(function(){return ul})),t.d(e,"DodecahedronGeometry",(function(){return Yc})),t.d(e,"DoubleSide",(function(){return h})),t.d(e,"DstAlphaFactor",(function(){return S})),t.d(e,"DstColorFactor",(function(){return H})),t.d(e,"DynamicCopyUsage",(function(){return Mt})),t.d(e,"DynamicDrawUsage",(function(){return ut})),t.d(e,"DynamicReadUsage",(function(){return Ct})),t.d(e,"EdgesGeometry",(function(){return Tc})),t.d(e,"EllipseCurve",(function(){return $B})),t.d(e,"EqualCompare",(function(){return at})),t.d(e,"EqualDepth",(function(){return P})),t.d(e,"EqualStencilFunc",(function(){return At})),t.d(e,"EquirectangularReflectionMapping",(function(){return sA})),t.d(e,"EquirectangularRefractionMapping",(function(){return oA})),t.d(e,"Euler",(function(){return oi})),t.d(e,"EventDispatcher",(function(){return Nt})),t.d(e,"ExtrudeBufferGeometry",(function(){return hl})),t.d(e,"ExtrudeGeometry",(function(){return og})),t.d(e,"FileLoader",(function(){return iE})),t.d(e,"Float16BufferAttribute",(function(){return rr})),t.d(e,"Float32BufferAttribute",(function(){return sr})),t.d(e,"Float64BufferAttribute",(function(){return or})),t.d(e,"FloatType",(function(){return NA})),t.d(e,"Fog",(function(){return Sa})),t.d(e,"FogExp2",(function(){return Ga})),t.d(e,"FramebufferTexture",(function(){return KB})),t.d(e,"FrontSide",(function(){return l})),t.d(e,"Frustum",(function(){return qr})),t.d(e,"GLBufferAttribute",(function(){return pQ})),t.d(e,"GLSL1",(function(){return mt})),t.d(e,"GLSL3",(function(){return Ft})),t.d(e,"GreaterCompare",(function(){return ct})),t.d(e,"GreaterDepth",(function(){return W})),t.d(e,"GreaterEqualCompare",(function(){return Et})),t.d(e,"GreaterEqualDepth",(function(){return O})),t.d(e,"GreaterEqualStencilFunc",(function(){return it})),t.d(e,"GreaterStencilFunc",(function(){return tt})),t.d(e,"GridHelper",(function(){return PQ})),t.d(e,"Group",(function(){return Fa})),t.d(e,"HalfFloatType",(function(){return UA})),t.d(e,"HemisphereLight",(function(){return EE})),t.d(e,"HemisphereLightHelper",(function(){return LQ})),t.d(e,"HemisphereLightProbe",(function(){return zE})),t.d(e,"IcosahedronBufferGeometry",(function(){return wl})),t.d(e,"IcosahedronGeometry",(function(){return Bg})),t.d(e,"ImageBitmapLoader",(function(){return kE})),t.d(e,"ImageLoader",(function(){return oE})),t.d(e,"ImageUtils",(function(){return on})),t.d(e,"IncrementStencilOp",(function(){return Ve})),t.d(e,"IncrementWrapStencilOp",(function(){return Xe})),t.d(e,"InstancedBufferAttribute",(function(){return IB})),t.d(e,"InstancedBufferGeometry",(function(){return xE})),t.d(e,"InstancedInterleavedBuffer",(function(){return MQ})),t.d(e,"InstancedMesh",(function(){return NB})),t.d(e,"Int16BufferAttribute",(function(){return er})),t.d(e,"Int32BufferAttribute",(function(){return nr})),t.d(e,"Int8BufferAttribute",(function(){return qi})),t.d(e,"IntType",(function(){return YA})),t.d(e,"InterleavedBuffer",(function(){return Ha})),t.d(e,"InterleavedBufferAttribute",(function(){return va})),t.d(e,"Interpolant",(function(){return kg})),t.d(e,"InterpolateDiscrete",(function(){return me})),t.d(e,"InterpolateLinear",(function(){return Fe})),t.d(e,"InterpolateSmooth",(function(){return De})),t.d(e,"InvertStencilOp",(function(){return _e})),t.d(e,"KeepStencilOp",(function(){return Oe})),t.d(e,"KeyframeTrack",(function(){return zg})),t.d(e,"LOD",(function(){return iB})),t.d(e,"LatheBufferGeometry",(function(){return Cl})),t.d(e,"LatheGeometry",(function(){return Ic})),t.d(e,"Layers",(function(){return ai})),t.d(e,"LessCompare",(function(){return ot})),t.d(e,"LessDepth",(function(){return z})),t.d(e,"LessEqualCompare",(function(){return Bt})),t.d(e,"LessEqualDepth",(function(){return L})),t.d(e,"LessEqualStencilFunc",(function(){return et})),t.d(e,"LessStencilFunc",(function(){return $e})),t.d(e,"Light",(function(){return gE})),t.d(e,"LightProbe",(function(){return UE})),t.d(e,"Line",(function(){return SB})),t.d(e,"Line3",(function(){return xQ})),t.d(e,"LineBasicMaterial",(function(){return UB})),t.d(e,"LineCurve",(function(){return Ec})),t.d(e,"LineCurve3",(function(){return Qc})),t.d(e,"LineDashedMaterial",(function(){return yg})),t.d(e,"LineLoop",(function(){return vB})),t.d(e,"LineSegments",(function(){return kB})),t.d(e,"LinearEncoding",(function(){return Ge})),t.d(e,"LinearFilter",(function(){return wA})),t.d(e,"LinearInterpolant",(function(){return Jg})),t.d(e,"LinearMipMapLinearFilter",(function(){return MA})),t.d(e,"LinearMipMapNearestFilter",(function(){return dA})),t.d(e,"LinearMipmapLinearFilter",(function(){return IA})),t.d(e,"LinearMipmapNearestFilter",(function(){return CA})),t.d(e,"LinearSRGBColorSpace",(function(){return ze})),t.d(e,"LinearToneMapping",(function(){return q})),t.d(e,"Loader",(function(){return eE})),t.d(e,"LoaderUtils",(function(){return TE})),t.d(e,"LoadingManager",(function(){return $g})),t.d(e,"LoopOnce",(function(){return Ie})),t.d(e,"LoopPingPong",(function(){return pe})),t.d(e,"LoopRepeat",(function(){return Me})),t.d(e,"LuminanceAlphaFormat",(function(){return bA})),t.d(e,"LuminanceFormat",(function(){return SA})),t.d(e,"MOUSE",(function(){return i})),t.d(e,"Material",(function(){return bi})),t.d(e,"MaterialLoader",(function(){return yE})),t.d(e,"MathUtils",(function(){return zt})),t.d(e,"Matrix3",(function(){return Pt})),t.d(e,"Matrix4",(function(){return _n})),t.d(e,"MaxEquation",(function(){return N})),t.d(e,"Mesh",(function(){return Rr})),t.d(e,"MeshBasicMaterial",(function(){return Li})),t.d(e,"MeshDepthMaterial",(function(){return wa})),t.d(e,"MeshDistanceMaterial",(function(){return Ca})),t.d(e,"MeshLambertMaterial",(function(){return Ng})),t.d(e,"MeshMatcapMaterial",(function(){return Ug})),t.d(e,"MeshNormalMaterial",(function(){return fg})),t.d(e,"MeshPhongMaterial",(function(){return Dg})),t.d(e,"MeshPhysicalMaterial",(function(){return Fg})),t.d(e,"MeshStandardMaterial",(function(){return mg})),t.d(e,"MeshToonMaterial",(function(){return Yg})),t.d(e,"MinEquation",(function(){return f})),t.d(e,"MirroredRepeatWrapping",(function(){return gA})),t.d(e,"MixOperation",(function(){return X})),t.d(e,"MultiplyBlending",(function(){return p})),t.d(e,"MultiplyOperation",(function(){return K})),t.d(e,"NearestFilter",(function(){return EA})),t.d(e,"NearestMipMapLinearFilter",(function(){return hA})),t.d(e,"NearestMipMapNearestFilter",(function(){return lA})),t.d(e,"NearestMipmapLinearFilter",(function(){return uA})),t.d(e,"NearestMipmapNearestFilter",(function(){return QA})),t.d(e,"NeverCompare",(function(){return st})),t.d(e,"NeverDepth",(function(){return J})),t.d(e,"NeverStencilFunc",(function(){return qe})),t.d(e,"NoBlending",(function(){return C})),t.d(e,"NoColorSpace",(function(){return Je})),t.d(e,"NoToneMapping",(function(){return _})),t.d(e,"NormalAnimationBlendMode",(function(){return Ue})),t.d(e,"NormalBlending",(function(){return d})),t.d(e,"NotEqualCompare",(function(){return gt})),t.d(e,"NotEqualDepth",(function(){return V})),t.d(e,"NotEqualStencilFunc",(function(){return nt})),t.d(e,"NumberKeyframeTrack",(function(){return Og})),t.d(e,"Object3D",(function(){return pi})),t.d(e,"ObjectLoader",(function(){return GE})),t.d(e,"ObjectSpaceNormalMap",(function(){return ve})),t.d(e,"OctahedronBufferGeometry",(function(){return dl})),t.d(e,"OctahedronGeometry",(function(){return cg})),t.d(e,"OneFactor",(function(){return y})),t.d(e,"OneMinusDstAlphaFactor",(function(){return b})),t.d(e,"OneMinusDstColorFactor",(function(){return k})),t.d(e,"OneMinusSrcAlphaFactor",(function(){return G})),t.d(e,"OneMinusSrcColorFactor",(function(){return x})),t.d(e,"OrthographicCamera",(function(){return Es})),t.d(e,"PCFShadowMap",(function(){return g})),t.d(e,"PCFSoftShadowMap",(function(){return E})),t.d(e,"PMREMGenerator",(function(){return Is})),t.d(e,"Path",(function(){return dc})),t.d(e,"PerspectiveCamera",(function(){return zr})),t.d(e,"Plane",(function(){return Xr})),t.d(e,"PlaneBufferGeometry",(function(){return Il})),t.d(e,"PlaneGeometry",(function(){return es})),t.d(e,"PlaneHelper",(function(){return nl})),t.d(e,"PointLight",(function(){return mE})),t.d(e,"PointLightHelper",(function(){return vQ})),t.d(e,"Points",(function(){return OB})),t.d(e,"PointsMaterial",(function(){return JB})),t.d(e,"PolarGridHelper",(function(){return OQ})),t.d(e,"PolyhedronBufferGeometry",(function(){return Ml})),t.d(e,"PolyhedronGeometry",(function(){return Dc})),t.d(e,"PositionalAudio",(function(){return sQ})),t.d(e,"PropertyBinding",(function(){return QQ})),t.d(e,"PropertyMixer",(function(){return aQ})),t.d(e,"QuadraticBezierCurve",(function(){return lc})),t.d(e,"QuadraticBezierCurve3",(function(){return uc})),t.d(e,"Quaternion",(function(){return In})),t.d(e,"QuaternionKeyframeTrack",(function(){return Vg})),t.d(e,"QuaternionLinearInterpolant",(function(){return Wg})),t.d(e,"RED_GREEN_RGTC2_Format",(function(){return Ce})),t.d(e,"RED_RGTC1_Format",(function(){return he})),t.d(e,"REVISION",(function(){return n})),t.d(e,"RGBADepthPacking",(function(){return He})),t.d(e,"RGBAFormat",(function(){return GA})),t.d(e,"RGBAIntegerFormat",(function(){return LA})),t.d(e,"RGBA_ASTC_10x10_Format",(function(){return Ee})),t.d(e,"RGBA_ASTC_10x5_Format",(function(){return Be})),t.d(e,"RGBA_ASTC_10x6_Format",(function(){return ce})),t.d(e,"RGBA_ASTC_10x8_Format",(function(){return ge})),t.d(e,"RGBA_ASTC_12x10_Format",(function(){return Qe})),t.d(e,"RGBA_ASTC_12x12_Format",(function(){return le})),t.d(e,"RGBA_ASTC_4x4_Format",(function(){return ee})),t.d(e,"RGBA_ASTC_5x4_Format",(function(){return te})),t.d(e,"RGBA_ASTC_5x5_Format",(function(){return ne})),t.d(e,"RGBA_ASTC_6x5_Format",(function(){return ie})),t.d(e,"RGBA_ASTC_6x6_Format",(function(){return re})),t.d(e,"RGBA_ASTC_8x5_Format",(function(){return se})),t.d(e,"RGBA_ASTC_8x6_Format",(function(){return oe})),t.d(e,"RGBA_ASTC_8x8_Format",(function(){return ae})),t.d(e,"RGBA_BPTC_Format",(function(){return ue})),t.d(e,"RGBA_ETC2_EAC_Format",(function(){return Ae})),t.d(e,"RGBA_PVRTC_2BPPV1_Format",(function(){return _A})),t.d(e,"RGBA_PVRTC_4BPPV1_Format",(function(){return ZA})),t.d(e,"RGBA_S3TC_DXT1_Format",(function(){return OA})),t.d(e,"RGBA_S3TC_DXT3_Format",(function(){return WA})),t.d(e,"RGBA_S3TC_DXT5_Format",(function(){return VA})),t.d(e,"RGB_ETC1_Format",(function(){return qA})),t.d(e,"RGB_ETC2_Format",(function(){return $A})),t.d(e,"RGB_PVRTC_2BPPV1_Format",(function(){return XA})),t.d(e,"RGB_PVRTC_4BPPV1_Format",(function(){return KA})),t.d(e,"RGB_S3TC_DXT1_Format",(function(){return PA})),t.d(e,"RGFormat",(function(){return jA})),t.d(e,"RGIntegerFormat",(function(){return zA})),t.d(e,"RawShaderMaterial",(function(){return pg})),t.d(e,"Ray",(function(){return Zn})),t.d(e,"Raycaster",(function(){return mQ})),t.d(e,"RectAreaLight",(function(){return fE})),t.d(e,"RedFormat",(function(){return vA})),t.d(e,"RedIntegerFormat",(function(){return JA})),t.d(e,"ReinhardToneMapping",(function(){return $})),t.d(e,"RepeatWrapping",(function(){return BA})),t.d(e,"ReplaceStencilOp",(function(){return We})),t.d(e,"ReverseSubtractEquation",(function(){return Y})),t.d(e,"RingBufferGeometry",(function(){return pl})),t.d(e,"RingGeometry",(function(){return gg})),t.d(e,"SIGNED_RED_GREEN_RGTC2_Format",(function(){return de})),t.d(e,"SIGNED_RED_RGTC1_Format",(function(){return we})),t.d(e,"SRGBColorSpace",(function(){return je})),t.d(e,"Scene",(function(){return ba})),t.d(e,"ShaderChunk",(function(){return ts})),t.d(e,"ShaderLib",(function(){return is})),t.d(e,"ShaderMaterial",(function(){return Jr})),t.d(e,"ShadowMaterial",(function(){return Mg})),t.d(e,"Shape",(function(){return xc})),t.d(e,"ShapeBufferGeometry",(function(){return ml})),t.d(e,"ShapeGeometry",(function(){return Eg})),t.d(e,"ShapePath",(function(){return Bl})),t.d(e,"ShapeUtils",(function(){return ig})),t.d(e,"ShortType",(function(){return FA})),t.d(e,"Skeleton",(function(){return dB})),t.d(e,"SkeletonHelper",(function(){return kQ})),t.d(e,"SkinnedMesh",(function(){return lB})),t.d(e,"Source",(function(){return Bn})),t.d(e,"Sphere",(function(){return zn})),t.d(e,"SphereBufferGeometry",(function(){return Fl})),t.d(e,"SphereGeometry",(function(){return Qg})),t.d(e,"Spherical",(function(){return YQ})),t.d(e,"SphericalHarmonics3",(function(){return NE})),t.d(e,"SplineCurve",(function(){return hc})),t.d(e,"SpotLight",(function(){return CE})),t.d(e,"SpotLightHelper",(function(){return GQ})),t.d(e,"Sprite",(function(){return AB})),t.d(e,"SpriteMaterial",(function(){return Ja})),t.d(e,"SrcAlphaFactor",(function(){return R})),t.d(e,"SrcAlphaSaturateFactor",(function(){return v})),t.d(e,"SrcColorFactor",(function(){return T})),t.d(e,"StaticCopyUsage",(function(){return It})),t.d(e,"StaticDrawUsage",(function(){return lt})),t.d(e,"StaticReadUsage",(function(){return wt})),t.d(e,"StereoCamera",(function(){return VE})),t.d(e,"StreamCopyUsage",(function(){return pt})),t.d(e,"StreamDrawUsage",(function(){return ht})),t.d(e,"StreamReadUsage",(function(){return dt})),t.d(e,"StringKeyframeTrack",(function(){return Kg})),t.d(e,"SubtractEquation",(function(){return D})),t.d(e,"SubtractiveBlending",(function(){return M})),t.d(e,"TOUCH",(function(){return r})),t.d(e,"TangentSpaceNormalMap",(function(){return ke})),t.d(e,"TetrahedronBufferGeometry",(function(){return Dl})),t.d(e,"TetrahedronGeometry",(function(){return lg})),t.d(e,"Texture",(function(){return En})),t.d(e,"TextureLoader",(function(){return cE})),t.d(e,"TorusBufferGeometry",(function(){return Yl})),t.d(e,"TorusGeometry",(function(){return ug})),t.d(e,"TorusKnotBufferGeometry",(function(){return fl})),t.d(e,"TorusKnotGeometry",(function(){return hg})),t.d(e,"Triangle",(function(){return Gi})),t.d(e,"TriangleFanDrawMode",(function(){return Re})),t.d(e,"TriangleStripDrawMode",(function(){return xe})),t.d(e,"TrianglesDrawMode",(function(){return Te})),t.d(e,"TubeBufferGeometry",(function(){return Nl})),t.d(e,"TubeGeometry",(function(){return wg})),t.d(e,"TwoPassDoubleSide",(function(){return w})),t.d(e,"UVMapping",(function(){return nA})),t.d(e,"Uint16BufferAttribute",(function(){return tr})),t.d(e,"Uint32BufferAttribute",(function(){return ir})),t.d(e,"Uint8BufferAttribute",(function(){return $i})),t.d(e,"Uint8ClampedBufferAttribute",(function(){return Ar})),t.d(e,"Uniform",(function(){return CQ})),t.d(e,"UniformsGroup",(function(){return IQ})),t.d(e,"UniformsLib",(function(){return ns})),t.d(e,"UniformsUtils",(function(){return vr})),t.d(e,"UnsignedByteType",(function(){return pA})),t.d(e,"UnsignedInt248Type",(function(){return xA})),t.d(e,"UnsignedIntType",(function(){return fA})),t.d(e,"UnsignedShort4444Type",(function(){return yA})),t.d(e,"UnsignedShort5551Type",(function(){return TA})),t.d(e,"UnsignedShortType",(function(){return DA})),t.d(e,"VSMShadowMap",(function(){return Q})),t.d(e,"Vector2",(function(){return Lt})),t.d(e,"Vector3",(function(){return Mn})),t.d(e,"Vector4",(function(){return Qn})),t.d(e,"VectorKeyframeTrack",(function(){return Xg})),t.d(e,"VideoTexture",(function(){return VB})),t.d(e,"WebGL1Renderer",(function(){return Ra})),t.d(e,"WebGL3DRenderTarget",(function(){return Cn})),t.d(e,"WebGLArrayRenderTarget",(function(){return hn})),t.d(e,"WebGLCoordinateSystem",(function(){return Yt})),t.d(e,"WebGLCubeRenderTarget",(function(){return Or})),t.d(e,"WebGLMultipleRenderTargets",(function(){return dn})),t.d(e,"WebGLRenderTarget",(function(){return ln})),t.d(e,"WebGLRenderer",(function(){return xa})),t.d(e,"WebGLUtils",(function(){return pa})),t.d(e,"WebGPUCoordinateSystem",(function(){return ft})),t.d(e,"WireframeGeometry",(function(){return Cg})),t.d(e,"WrapAroundEnding",(function(){return Ne})),t.d(e,"ZeroCurvatureEnding",(function(){return Ye})),t.d(e,"ZeroFactor",(function(){return U})),t.d(e,"ZeroSlopeEnding",(function(){return fe})),t.d(e,"ZeroStencilOp",(function(){return Pe})),t.d(e,"_SRGBAFormat",(function(){return Dt})),t.d(e,"sRGBEncoding",(function(){return Se}));
/**
 * @license
 * Copyright 2010-2023 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
const n="153",i={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},r={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},s=0,o=1,a=2,B=3,c=0,g=1,E=2,Q=3,l=0,u=1,h=2,w=2,C=0,d=1,I=2,M=3,p=4,m=5,F=100,D=101,Y=102,f=103,N=104,U=200,y=201,T=202,x=203,R=204,G=205,S=206,b=207,H=208,k=209,v=210,J=0,j=1,z=2,L=3,P=4,O=5,W=6,V=7,K=0,X=1,Z=2,_=0,q=1,$=2,AA=3,eA=4,tA=5,nA=300,iA=301,rA=302,sA=303,oA=304,aA=306,BA=1e3,cA=1001,gA=1002,EA=1003,QA=1004,lA=1004,uA=1005,hA=1005,wA=1006,CA=1007,dA=1007,IA=1008,MA=1008,pA=1009,mA=1010,FA=1011,DA=1012,YA=1013,fA=1014,NA=1015,UA=1016,yA=1017,TA=1018,xA=1020,RA=1021,GA=1023,SA=1024,bA=1025,HA=1026,kA=1027,vA=1028,JA=1029,jA=1030,zA=1031,LA=1033,PA=33776,OA=33777,WA=33778,VA=33779,KA=35840,XA=35841,ZA=35842,_A=35843,qA=36196,$A=37492,Ae=37496,ee=37808,te=37809,ne=37810,ie=37811,re=37812,se=37813,oe=37814,ae=37815,Be=37816,ce=37817,ge=37818,Ee=37819,Qe=37820,le=37821,ue=36492,he=36283,we=36284,Ce=36285,de=36286,Ie=2200,Me=2201,pe=2202,me=2300,Fe=2301,De=2302,Ye=2400,fe=2401,Ne=2402,Ue=2500,ye=2501,Te=0,xe=1,Re=2,Ge=3e3,Se=3001,be=3200,He=3201,ke=0,ve=1,Je="",je="srgb",ze="srgb-linear",Le="display-p3",Pe=0,Oe=7680,We=7681,Ve=7682,Ke=7683,Xe=34055,Ze=34056,_e=5386,qe=512,$e=513,At=514,et=515,tt=516,nt=517,it=518,rt=519,st=512,ot=513,at=514,Bt=515,ct=516,gt=517,Et=518,Qt=519,lt=35044,ut=35048,ht=35040,wt=35045,Ct=35049,dt=35041,It=35046,Mt=35050,pt=35042,mt="100",Ft="300 es",Dt=1035,Yt=2e3,ft=2001;class Nt{addEventListener(A,e){void 0===this._listeners&&(this._listeners={});const t=this._listeners;void 0===t[A]&&(t[A]=[]),-1===t[A].indexOf(e)&&t[A].push(e)}hasEventListener(A,e){if(void 0===this._listeners)return!1;const t=this._listeners;return void 0!==t[A]&&-1!==t[A].indexOf(e)}removeEventListener(A,e){if(void 0===this._listeners)return;const t=this._listeners[A];if(void 0!==t){const A=t.indexOf(e);-1!==A&&t.splice(A,1)}}dispatchEvent(A){if(void 0===this._listeners)return;const e=this._listeners[A.type];if(void 0!==e){A.target=this;const t=e.slice(0);for(let e=0,n=t.length;e<n;e++)t[e].call(this,A);A.target=null}}}const Ut=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let yt=1234567;const Tt=Math.PI/180,xt=180/Math.PI;function Rt(){const A=4294967295*Math.random()|0,e=4294967295*Math.random()|0,t=4294967295*Math.random()|0,n=4294967295*Math.random()|0;return(Ut[255&A]+Ut[A>>8&255]+Ut[A>>16&255]+Ut[A>>24&255]+"-"+Ut[255&e]+Ut[e>>8&255]+"-"+Ut[e>>16&15|64]+Ut[e>>24&255]+"-"+Ut[63&t|128]+Ut[t>>8&255]+"-"+Ut[t>>16&255]+Ut[t>>24&255]+Ut[255&n]+Ut[n>>8&255]+Ut[n>>16&255]+Ut[n>>24&255]).toLowerCase()}function Gt(A,e,t){return Math.max(e,Math.min(t,A))}function St(A,e){return(A%e+e)%e}function bt(A,e,t){return(1-t)*A+t*e}function Ht(A){return 0==(A&A-1)&&0!==A}function kt(A){return Math.pow(2,Math.ceil(Math.log(A)/Math.LN2))}function vt(A){return Math.pow(2,Math.floor(Math.log(A)/Math.LN2))}function Jt(A,e){switch(e.constructor){case Float32Array:return A;case Uint32Array:return A/4294967295;case Uint16Array:return A/65535;case Uint8Array:return A/255;case Int32Array:return Math.max(A/2147483647,-1);case Int16Array:return Math.max(A/32767,-1);case Int8Array:return Math.max(A/127,-1);default:throw new Error("Invalid component type.")}}function jt(A,e){switch(e.constructor){case Float32Array:return A;case Uint32Array:return Math.round(4294967295*A);case Uint16Array:return Math.round(65535*A);case Uint8Array:return Math.round(255*A);case Int32Array:return Math.round(2147483647*A);case Int16Array:return Math.round(32767*A);case Int8Array:return Math.round(127*A);default:throw new Error("Invalid component type.")}}const zt={DEG2RAD:Tt,RAD2DEG:xt,generateUUID:Rt,clamp:Gt,euclideanModulo:St,mapLinear:function(A,e,t,n,i){return n+(A-e)*(i-n)/(t-e)},inverseLerp:function(A,e,t){return A!==e?(t-A)/(e-A):0},lerp:bt,damp:function(A,e,t,n){return bt(A,e,1-Math.exp(-t*n))},pingpong:function(A,e=1){return e-Math.abs(St(A,2*e)-e)},smoothstep:function(A,e,t){return A<=e?0:A>=t?1:(A=(A-e)/(t-e))*A*(3-2*A)},smootherstep:function(A,e,t){return A<=e?0:A>=t?1:(A=(A-e)/(t-e))*A*A*(A*(6*A-15)+10)},randInt:function(A,e){return A+Math.floor(Math.random()*(e-A+1))},randFloat:function(A,e){return A+Math.random()*(e-A)},randFloatSpread:function(A){return A*(.5-Math.random())},seededRandom:function(A){void 0!==A&&(yt=A);let e=yt+=1831565813;return e=Math.imul(e^e>>>15,1|e),e^=e+Math.imul(e^e>>>7,61|e),((e^e>>>14)>>>0)/4294967296},degToRad:function(A){return A*Tt},radToDeg:function(A){return A*xt},isPowerOfTwo:Ht,ceilPowerOfTwo:kt,floorPowerOfTwo:vt,setQuaternionFromProperEuler:function(A,e,t,n,i){const r=Math.cos,s=Math.sin,o=r(t/2),a=s(t/2),B=r((e+n)/2),c=s((e+n)/2),g=r((e-n)/2),E=s((e-n)/2),Q=r((n-e)/2),l=s((n-e)/2);switch(i){case"XYX":A.set(o*c,a*g,a*E,o*B);break;case"YZY":A.set(a*E,o*c,a*g,o*B);break;case"ZXZ":A.set(a*g,a*E,o*c,o*B);break;case"XZX":A.set(o*c,a*l,a*Q,o*B);break;case"YXY":A.set(a*Q,o*c,a*l,o*B);break;case"ZYZ":A.set(a*l,a*Q,o*c,o*B);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+i)}},normalize:jt,denormalize:Jt};class Lt{constructor(A=0,e=0){Lt.prototype.isVector2=!0,this.x=A,this.y=e}get width(){return this.x}set width(A){this.x=A}get height(){return this.y}set height(A){this.y=A}set(A,e){return this.x=A,this.y=e,this}setScalar(A){return this.x=A,this.y=A,this}setX(A){return this.x=A,this}setY(A){return this.y=A,this}setComponent(A,e){switch(A){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+A)}return this}getComponent(A){switch(A){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+A)}}clone(){return new this.constructor(this.x,this.y)}copy(A){return this.x=A.x,this.y=A.y,this}add(A){return this.x+=A.x,this.y+=A.y,this}addScalar(A){return this.x+=A,this.y+=A,this}addVectors(A,e){return this.x=A.x+e.x,this.y=A.y+e.y,this}addScaledVector(A,e){return this.x+=A.x*e,this.y+=A.y*e,this}sub(A){return this.x-=A.x,this.y-=A.y,this}subScalar(A){return this.x-=A,this.y-=A,this}subVectors(A,e){return this.x=A.x-e.x,this.y=A.y-e.y,this}multiply(A){return this.x*=A.x,this.y*=A.y,this}multiplyScalar(A){return this.x*=A,this.y*=A,this}divide(A){return this.x/=A.x,this.y/=A.y,this}divideScalar(A){return this.multiplyScalar(1/A)}applyMatrix3(A){const e=this.x,t=this.y,n=A.elements;return this.x=n[0]*e+n[3]*t+n[6],this.y=n[1]*e+n[4]*t+n[7],this}min(A){return this.x=Math.min(this.x,A.x),this.y=Math.min(this.y,A.y),this}max(A){return this.x=Math.max(this.x,A.x),this.y=Math.max(this.y,A.y),this}clamp(A,e){return this.x=Math.max(A.x,Math.min(e.x,this.x)),this.y=Math.max(A.y,Math.min(e.y,this.y)),this}clampScalar(A,e){return this.x=Math.max(A,Math.min(e,this.x)),this.y=Math.max(A,Math.min(e,this.y)),this}clampLength(A,e){const t=this.length();return this.divideScalar(t||1).multiplyScalar(Math.max(A,Math.min(e,t)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(A){return this.x*A.x+this.y*A.y}cross(A){return this.x*A.y-this.y*A.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(A){const e=Math.sqrt(this.lengthSq()*A.lengthSq());if(0===e)return Math.PI/2;const t=this.dot(A)/e;return Math.acos(Gt(t,-1,1))}distanceTo(A){return Math.sqrt(this.distanceToSquared(A))}distanceToSquared(A){const e=this.x-A.x,t=this.y-A.y;return e*e+t*t}manhattanDistanceTo(A){return Math.abs(this.x-A.x)+Math.abs(this.y-A.y)}setLength(A){return this.normalize().multiplyScalar(A)}lerp(A,e){return this.x+=(A.x-this.x)*e,this.y+=(A.y-this.y)*e,this}lerpVectors(A,e,t){return this.x=A.x+(e.x-A.x)*t,this.y=A.y+(e.y-A.y)*t,this}equals(A){return A.x===this.x&&A.y===this.y}fromArray(A,e=0){return this.x=A[e],this.y=A[e+1],this}toArray(A=[],e=0){return A[e]=this.x,A[e+1]=this.y,A}fromBufferAttribute(A,e){return this.x=A.getX(e),this.y=A.getY(e),this}rotateAround(A,e){const t=Math.cos(e),n=Math.sin(e),i=this.x-A.x,r=this.y-A.y;return this.x=i*t-r*n+A.x,this.y=i*n+r*t+A.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class Pt{constructor(A,e,t,n,i,r,s,o,a){Pt.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],void 0!==A&&this.set(A,e,t,n,i,r,s,o,a)}set(A,e,t,n,i,r,s,o,a){const B=this.elements;return B[0]=A,B[1]=n,B[2]=s,B[3]=e,B[4]=i,B[5]=o,B[6]=t,B[7]=r,B[8]=a,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(A){const e=this.elements,t=A.elements;return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],this}extractBasis(A,e,t){return A.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),t.setFromMatrix3Column(this,2),this}setFromMatrix4(A){const e=A.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(A){return this.multiplyMatrices(this,A)}premultiply(A){return this.multiplyMatrices(A,this)}multiplyMatrices(A,e){const t=A.elements,n=e.elements,i=this.elements,r=t[0],s=t[3],o=t[6],a=t[1],B=t[4],c=t[7],g=t[2],E=t[5],Q=t[8],l=n[0],u=n[3],h=n[6],w=n[1],C=n[4],d=n[7],I=n[2],M=n[5],p=n[8];return i[0]=r*l+s*w+o*I,i[3]=r*u+s*C+o*M,i[6]=r*h+s*d+o*p,i[1]=a*l+B*w+c*I,i[4]=a*u+B*C+c*M,i[7]=a*h+B*d+c*p,i[2]=g*l+E*w+Q*I,i[5]=g*u+E*C+Q*M,i[8]=g*h+E*d+Q*p,this}multiplyScalar(A){const e=this.elements;return e[0]*=A,e[3]*=A,e[6]*=A,e[1]*=A,e[4]*=A,e[7]*=A,e[2]*=A,e[5]*=A,e[8]*=A,this}determinant(){const A=this.elements,e=A[0],t=A[1],n=A[2],i=A[3],r=A[4],s=A[5],o=A[6],a=A[7],B=A[8];return e*r*B-e*s*a-t*i*B+t*s*o+n*i*a-n*r*o}invert(){const A=this.elements,e=A[0],t=A[1],n=A[2],i=A[3],r=A[4],s=A[5],o=A[6],a=A[7],B=A[8],c=B*r-s*a,g=s*o-B*i,E=a*i-r*o,Q=e*c+t*g+n*E;if(0===Q)return this.set(0,0,0,0,0,0,0,0,0);const l=1/Q;return A[0]=c*l,A[1]=(n*a-B*t)*l,A[2]=(s*t-n*r)*l,A[3]=g*l,A[4]=(B*e-n*o)*l,A[5]=(n*i-s*e)*l,A[6]=E*l,A[7]=(t*o-a*e)*l,A[8]=(r*e-t*i)*l,this}transpose(){let A;const e=this.elements;return A=e[1],e[1]=e[3],e[3]=A,A=e[2],e[2]=e[6],e[6]=A,A=e[5],e[5]=e[7],e[7]=A,this}getNormalMatrix(A){return this.setFromMatrix4(A).invert().transpose()}transposeIntoArray(A){const e=this.elements;return A[0]=e[0],A[1]=e[3],A[2]=e[6],A[3]=e[1],A[4]=e[4],A[5]=e[7],A[6]=e[2],A[7]=e[5],A[8]=e[8],this}setUvTransform(A,e,t,n,i,r,s){const o=Math.cos(i),a=Math.sin(i);return this.set(t*o,t*a,-t*(o*r+a*s)+r+A,-n*a,n*o,-n*(-a*r+o*s)+s+e,0,0,1),this}scale(A,e){return this.premultiply(Ot.makeScale(A,e)),this}rotate(A){return this.premultiply(Ot.makeRotation(-A)),this}translate(A,e){return this.premultiply(Ot.makeTranslation(A,e)),this}makeTranslation(A,e){return A.isVector2?this.set(1,0,A.x,0,1,A.y,0,0,1):this.set(1,0,A,0,1,e,0,0,1),this}makeRotation(A){const e=Math.cos(A),t=Math.sin(A);return this.set(e,-t,0,t,e,0,0,0,1),this}makeScale(A,e){return this.set(A,0,0,0,e,0,0,0,1),this}equals(A){const e=this.elements,t=A.elements;for(let A=0;A<9;A++)if(e[A]!==t[A])return!1;return!0}fromArray(A,e=0){for(let t=0;t<9;t++)this.elements[t]=A[t+e];return this}toArray(A=[],e=0){const t=this.elements;return A[e]=t[0],A[e+1]=t[1],A[e+2]=t[2],A[e+3]=t[3],A[e+4]=t[4],A[e+5]=t[5],A[e+6]=t[6],A[e+7]=t[7],A[e+8]=t[8],A}clone(){return(new this.constructor).fromArray(this.elements)}}const Ot=new Pt;function Wt(A){for(let e=A.length-1;e>=0;--e)if(A[e]>=65535)return!0;return!1}const Vt={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:Uint8ClampedArray,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};function Kt(A,e){return new Vt[A](e)}function Xt(A){return document.createElementNS("http://www.w3.org/1999/xhtml",A)}const Zt={};function _t(A){A in Zt||(Zt[A]=!0,console.warn(A))}function qt(A){return A<.04045?.0773993808*A:Math.pow(.9478672986*A+.0521327014,2.4)}function $t(A){return A<.0031308?12.92*A:1.055*Math.pow(A,.41666)-.055}const An=(new Pt).fromArray([.8224621,.0331941,.0170827,.177538,.9668058,.0723974,-1e-7,1e-7,.9105199]),en=(new Pt).fromArray([1.2249401,-.0420569,-.0196376,-.2249404,1.0420571,-.0786361,1e-7,0,1.0982735]);const tn={[ze]:A=>A,[je]:A=>A.convertSRGBToLinear(),[Le]:function(A){return A.convertSRGBToLinear().applyMatrix3(en)}},nn={[ze]:A=>A,[je]:A=>A.convertLinearToSRGB(),[Le]:function(A){return A.applyMatrix3(An).convertLinearToSRGB()}},rn={enabled:!0,get legacyMode(){return console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."),!this.enabled},set legacyMode(A){console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."),this.enabled=!A},get workingColorSpace(){return ze},set workingColorSpace(A){console.warn("THREE.ColorManagement: .workingColorSpace is readonly.")},convert:function(A,e,t){if(!1===this.enabled||e===t||!e||!t)return A;const n=tn[e],i=nn[t];if(void 0===n||void 0===i)throw new Error(`Unsupported color space conversion, "${e}" to "${t}".`);return i(n(A))},fromWorkingColorSpace:function(A,e){return this.convert(A,this.workingColorSpace,e)},toWorkingColorSpace:function(A,e){return this.convert(A,e,this.workingColorSpace)}};let sn;class on{static getDataURL(A){if(/^data:/i.test(A.src))return A.src;if("undefined"==typeof HTMLCanvasElement)return A.src;let e;if(A instanceof HTMLCanvasElement)e=A;else{void 0===sn&&(sn=Xt("canvas")),sn.width=A.width,sn.height=A.height;const t=sn.getContext("2d");A instanceof ImageData?t.putImageData(A,0,0):t.drawImage(A,0,0,A.width,A.height),e=sn}return e.width>2048||e.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",A),e.toDataURL("image/jpeg",.6)):e.toDataURL("image/png")}static sRGBToLinear(A){if("undefined"!=typeof HTMLImageElement&&A instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&A instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&A instanceof ImageBitmap){const e=Xt("canvas");e.width=A.width,e.height=A.height;const t=e.getContext("2d");t.drawImage(A,0,0,A.width,A.height);const n=t.getImageData(0,0,A.width,A.height),i=n.data;for(let A=0;A<i.length;A++)i[A]=255*qt(i[A]/255);return t.putImageData(n,0,0),e}if(A.data){const e=A.data.slice(0);for(let A=0;A<e.length;A++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[A]=Math.floor(255*qt(e[A]/255)):e[A]=qt(e[A]);return{data:e,width:A.width,height:A.height}}return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),A}}let an=0;class Bn{constructor(A=null){this.isSource=!0,Object.defineProperty(this,"id",{value:an++}),this.uuid=Rt(),this.data=A,this.version=0}set needsUpdate(A){!0===A&&this.version++}toJSON(A){const e=void 0===A||"string"==typeof A;if(!e&&void 0!==A.images[this.uuid])return A.images[this.uuid];const t={uuid:this.uuid,url:""},n=this.data;if(null!==n){let A;if(Array.isArray(n)){A=[];for(let e=0,t=n.length;e<t;e++)n[e].isDataTexture?A.push(cn(n[e].image)):A.push(cn(n[e]))}else A=cn(n);t.url=A}return e||(A.images[this.uuid]=t),t}}function cn(A){return"undefined"!=typeof HTMLImageElement&&A instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&A instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&A instanceof ImageBitmap?on.getDataURL(A):A.data?{data:Array.from(A.data),width:A.width,height:A.height,type:A.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let gn=0;class En extends Nt{constructor(A=En.DEFAULT_IMAGE,e=En.DEFAULT_MAPPING,t=cA,n=cA,i=wA,r=IA,s=GA,o=pA,a=En.DEFAULT_ANISOTROPY,B=Je){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:gn++}),this.uuid=Rt(),this.name="",this.source=new Bn(A),this.mipmaps=[],this.mapping=e,this.channel=0,this.wrapS=t,this.wrapT=n,this.magFilter=i,this.minFilter=r,this.anisotropy=a,this.format=s,this.internalFormat=null,this.type=o,this.offset=new Lt(0,0),this.repeat=new Lt(1,1),this.center=new Lt(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Pt,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,"string"==typeof B?this.colorSpace=B:(_t("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace=B===Se?je:Je),this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(A=null){this.source.data=A}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(A){return this.name=A.name,this.source=A.source,this.mipmaps=A.mipmaps.slice(0),this.mapping=A.mapping,this.channel=A.channel,this.wrapS=A.wrapS,this.wrapT=A.wrapT,this.magFilter=A.magFilter,this.minFilter=A.minFilter,this.anisotropy=A.anisotropy,this.format=A.format,this.internalFormat=A.internalFormat,this.type=A.type,this.offset.copy(A.offset),this.repeat.copy(A.repeat),this.center.copy(A.center),this.rotation=A.rotation,this.matrixAutoUpdate=A.matrixAutoUpdate,this.matrix.copy(A.matrix),this.generateMipmaps=A.generateMipmaps,this.premultiplyAlpha=A.premultiplyAlpha,this.flipY=A.flipY,this.unpackAlignment=A.unpackAlignment,this.colorSpace=A.colorSpace,this.userData=JSON.parse(JSON.stringify(A.userData)),this.needsUpdate=!0,this}toJSON(A){const e=void 0===A||"string"==typeof A;if(!e&&void 0!==A.textures[this.uuid])return A.textures[this.uuid];const t={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(A).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(t.userData=this.userData),e||(A.textures[this.uuid]=t),t}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(A){if(this.mapping!==nA)return A;if(A.applyMatrix3(this.matrix),A.x<0||A.x>1)switch(this.wrapS){case BA:A.x=A.x-Math.floor(A.x);break;case cA:A.x=A.x<0?0:1;break;case gA:1===Math.abs(Math.floor(A.x)%2)?A.x=Math.ceil(A.x)-A.x:A.x=A.x-Math.floor(A.x)}if(A.y<0||A.y>1)switch(this.wrapT){case BA:A.y=A.y-Math.floor(A.y);break;case cA:A.y=A.y<0?0:1;break;case gA:1===Math.abs(Math.floor(A.y)%2)?A.y=Math.ceil(A.y)-A.y:A.y=A.y-Math.floor(A.y)}return this.flipY&&(A.y=1-A.y),A}set needsUpdate(A){!0===A&&(this.version++,this.source.needsUpdate=!0)}get encoding(){return _t("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace===je?Se:Ge}set encoding(A){_t("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace=A===Se?je:Je}}En.DEFAULT_IMAGE=null,En.DEFAULT_MAPPING=nA,En.DEFAULT_ANISOTROPY=1;class Qn{constructor(A=0,e=0,t=0,n=1){Qn.prototype.isVector4=!0,this.x=A,this.y=e,this.z=t,this.w=n}get width(){return this.z}set width(A){this.z=A}get height(){return this.w}set height(A){this.w=A}set(A,e,t,n){return this.x=A,this.y=e,this.z=t,this.w=n,this}setScalar(A){return this.x=A,this.y=A,this.z=A,this.w=A,this}setX(A){return this.x=A,this}setY(A){return this.y=A,this}setZ(A){return this.z=A,this}setW(A){return this.w=A,this}setComponent(A,e){switch(A){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+A)}return this}getComponent(A){switch(A){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+A)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(A){return this.x=A.x,this.y=A.y,this.z=A.z,this.w=void 0!==A.w?A.w:1,this}add(A){return this.x+=A.x,this.y+=A.y,this.z+=A.z,this.w+=A.w,this}addScalar(A){return this.x+=A,this.y+=A,this.z+=A,this.w+=A,this}addVectors(A,e){return this.x=A.x+e.x,this.y=A.y+e.y,this.z=A.z+e.z,this.w=A.w+e.w,this}addScaledVector(A,e){return this.x+=A.x*e,this.y+=A.y*e,this.z+=A.z*e,this.w+=A.w*e,this}sub(A){return this.x-=A.x,this.y-=A.y,this.z-=A.z,this.w-=A.w,this}subScalar(A){return this.x-=A,this.y-=A,this.z-=A,this.w-=A,this}subVectors(A,e){return this.x=A.x-e.x,this.y=A.y-e.y,this.z=A.z-e.z,this.w=A.w-e.w,this}multiply(A){return this.x*=A.x,this.y*=A.y,this.z*=A.z,this.w*=A.w,this}multiplyScalar(A){return this.x*=A,this.y*=A,this.z*=A,this.w*=A,this}applyMatrix4(A){const e=this.x,t=this.y,n=this.z,i=this.w,r=A.elements;return this.x=r[0]*e+r[4]*t+r[8]*n+r[12]*i,this.y=r[1]*e+r[5]*t+r[9]*n+r[13]*i,this.z=r[2]*e+r[6]*t+r[10]*n+r[14]*i,this.w=r[3]*e+r[7]*t+r[11]*n+r[15]*i,this}divideScalar(A){return this.multiplyScalar(1/A)}setAxisAngleFromQuaternion(A){this.w=2*Math.acos(A.w);const e=Math.sqrt(1-A.w*A.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=A.x/e,this.y=A.y/e,this.z=A.z/e),this}setAxisAngleFromRotationMatrix(A){let e,t,n,i;const r=A.elements,s=r[0],o=r[4],a=r[8],B=r[1],c=r[5],g=r[9],E=r[2],Q=r[6],l=r[10];if(Math.abs(o-B)<.01&&Math.abs(a-E)<.01&&Math.abs(g-Q)<.01){if(Math.abs(o+B)<.1&&Math.abs(a+E)<.1&&Math.abs(g+Q)<.1&&Math.abs(s+c+l-3)<.1)return this.set(1,0,0,0),this;e=Math.PI;const A=(s+1)/2,r=(c+1)/2,u=(l+1)/2,h=(o+B)/4,w=(a+E)/4,C=(g+Q)/4;return A>r&&A>u?A<.01?(t=0,n=.707106781,i=.707106781):(t=Math.sqrt(A),n=h/t,i=w/t):r>u?r<.01?(t=.707106781,n=0,i=.707106781):(n=Math.sqrt(r),t=h/n,i=C/n):u<.01?(t=.707106781,n=.707106781,i=0):(i=Math.sqrt(u),t=w/i,n=C/i),this.set(t,n,i,e),this}let u=Math.sqrt((Q-g)*(Q-g)+(a-E)*(a-E)+(B-o)*(B-o));return Math.abs(u)<.001&&(u=1),this.x=(Q-g)/u,this.y=(a-E)/u,this.z=(B-o)/u,this.w=Math.acos((s+c+l-1)/2),this}min(A){return this.x=Math.min(this.x,A.x),this.y=Math.min(this.y,A.y),this.z=Math.min(this.z,A.z),this.w=Math.min(this.w,A.w),this}max(A){return this.x=Math.max(this.x,A.x),this.y=Math.max(this.y,A.y),this.z=Math.max(this.z,A.z),this.w=Math.max(this.w,A.w),this}clamp(A,e){return this.x=Math.max(A.x,Math.min(e.x,this.x)),this.y=Math.max(A.y,Math.min(e.y,this.y)),this.z=Math.max(A.z,Math.min(e.z,this.z)),this.w=Math.max(A.w,Math.min(e.w,this.w)),this}clampScalar(A,e){return this.x=Math.max(A,Math.min(e,this.x)),this.y=Math.max(A,Math.min(e,this.y)),this.z=Math.max(A,Math.min(e,this.z)),this.w=Math.max(A,Math.min(e,this.w)),this}clampLength(A,e){const t=this.length();return this.divideScalar(t||1).multiplyScalar(Math.max(A,Math.min(e,t)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(A){return this.x*A.x+this.y*A.y+this.z*A.z+this.w*A.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(A){return this.normalize().multiplyScalar(A)}lerp(A,e){return this.x+=(A.x-this.x)*e,this.y+=(A.y-this.y)*e,this.z+=(A.z-this.z)*e,this.w+=(A.w-this.w)*e,this}lerpVectors(A,e,t){return this.x=A.x+(e.x-A.x)*t,this.y=A.y+(e.y-A.y)*t,this.z=A.z+(e.z-A.z)*t,this.w=A.w+(e.w-A.w)*t,this}equals(A){return A.x===this.x&&A.y===this.y&&A.z===this.z&&A.w===this.w}fromArray(A,e=0){return this.x=A[e],this.y=A[e+1],this.z=A[e+2],this.w=A[e+3],this}toArray(A=[],e=0){return A[e]=this.x,A[e+1]=this.y,A[e+2]=this.z,A[e+3]=this.w,A}fromBufferAttribute(A,e){return this.x=A.getX(e),this.y=A.getY(e),this.z=A.getZ(e),this.w=A.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class ln extends Nt{constructor(A=1,e=1,t={}){super(),this.isWebGLRenderTarget=!0,this.width=A,this.height=e,this.depth=1,this.scissor=new Qn(0,0,A,e),this.scissorTest=!1,this.viewport=new Qn(0,0,A,e);const n={width:A,height:e,depth:1};void 0!==t.encoding&&(_t("THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace."),t.colorSpace=t.encoding===Se?je:Je),this.texture=new En(n,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.flipY=!1,this.texture.generateMipmaps=void 0!==t.generateMipmaps&&t.generateMipmaps,this.texture.internalFormat=void 0!==t.internalFormat?t.internalFormat:null,this.texture.minFilter=void 0!==t.minFilter?t.minFilter:wA,this.depthBuffer=void 0===t.depthBuffer||t.depthBuffer,this.stencilBuffer=void 0!==t.stencilBuffer&&t.stencilBuffer,this.depthTexture=void 0!==t.depthTexture?t.depthTexture:null,this.samples=void 0!==t.samples?t.samples:0}setSize(A,e,t=1){this.width===A&&this.height===e&&this.depth===t||(this.width=A,this.height=e,this.depth=t,this.texture.image.width=A,this.texture.image.height=e,this.texture.image.depth=t,this.dispose()),this.viewport.set(0,0,A,e),this.scissor.set(0,0,A,e)}clone(){return(new this.constructor).copy(this)}copy(A){this.width=A.width,this.height=A.height,this.depth=A.depth,this.scissor.copy(A.scissor),this.scissorTest=A.scissorTest,this.viewport.copy(A.viewport),this.texture=A.texture.clone(),this.texture.isRenderTargetTexture=!0;const e=Object.assign({},A.texture.image);return this.texture.source=new Bn(e),this.depthBuffer=A.depthBuffer,this.stencilBuffer=A.stencilBuffer,null!==A.depthTexture&&(this.depthTexture=A.depthTexture.clone()),this.samples=A.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class un extends En{constructor(A=null,e=1,t=1,n=1){super(null),this.isDataArrayTexture=!0,this.image={data:A,width:e,height:t,depth:n},this.magFilter=EA,this.minFilter=EA,this.wrapR=cA,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class hn extends ln{constructor(A=1,e=1,t=1){super(A,e),this.isWebGLArrayRenderTarget=!0,this.depth=t,this.texture=new un(null,A,e,t),this.texture.isRenderTargetTexture=!0}}class wn extends En{constructor(A=null,e=1,t=1,n=1){super(null),this.isData3DTexture=!0,this.image={data:A,width:e,height:t,depth:n},this.magFilter=EA,this.minFilter=EA,this.wrapR=cA,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class Cn extends ln{constructor(A=1,e=1,t=1){super(A,e),this.isWebGL3DRenderTarget=!0,this.depth=t,this.texture=new wn(null,A,e,t),this.texture.isRenderTargetTexture=!0}}class dn extends ln{constructor(A=1,e=1,t=1,n={}){super(A,e,n),this.isWebGLMultipleRenderTargets=!0;const i=this.texture;this.texture=[];for(let A=0;A<t;A++)this.texture[A]=i.clone(),this.texture[A].isRenderTargetTexture=!0}setSize(A,e,t=1){if(this.width!==A||this.height!==e||this.depth!==t){this.width=A,this.height=e,this.depth=t;for(let n=0,i=this.texture.length;n<i;n++)this.texture[n].image.width=A,this.texture[n].image.height=e,this.texture[n].image.depth=t;this.dispose()}return this.viewport.set(0,0,A,e),this.scissor.set(0,0,A,e),this}copy(A){this.dispose(),this.width=A.width,this.height=A.height,this.depth=A.depth,this.scissor.copy(A.scissor),this.scissorTest=A.scissorTest,this.viewport.copy(A.viewport),this.depthBuffer=A.depthBuffer,this.stencilBuffer=A.stencilBuffer,null!==A.depthTexture&&(this.depthTexture=A.depthTexture.clone()),this.texture.length=0;for(let e=0,t=A.texture.length;e<t;e++)this.texture[e]=A.texture[e].clone(),this.texture[e].isRenderTargetTexture=!0;return this}}class In{constructor(A=0,e=0,t=0,n=1){this.isQuaternion=!0,this._x=A,this._y=e,this._z=t,this._w=n}static slerpFlat(A,e,t,n,i,r,s){let o=t[n+0],a=t[n+1],B=t[n+2],c=t[n+3];const g=i[r+0],E=i[r+1],Q=i[r+2],l=i[r+3];if(0===s)return A[e+0]=o,A[e+1]=a,A[e+2]=B,void(A[e+3]=c);if(1===s)return A[e+0]=g,A[e+1]=E,A[e+2]=Q,void(A[e+3]=l);if(c!==l||o!==g||a!==E||B!==Q){let A=1-s;const e=o*g+a*E+B*Q+c*l,t=e>=0?1:-1,n=1-e*e;if(n>Number.EPSILON){const i=Math.sqrt(n),r=Math.atan2(i,e*t);A=Math.sin(A*r)/i,s=Math.sin(s*r)/i}const i=s*t;if(o=o*A+g*i,a=a*A+E*i,B=B*A+Q*i,c=c*A+l*i,A===1-s){const A=1/Math.sqrt(o*o+a*a+B*B+c*c);o*=A,a*=A,B*=A,c*=A}}A[e]=o,A[e+1]=a,A[e+2]=B,A[e+3]=c}static multiplyQuaternionsFlat(A,e,t,n,i,r){const s=t[n],o=t[n+1],a=t[n+2],B=t[n+3],c=i[r],g=i[r+1],E=i[r+2],Q=i[r+3];return A[e]=s*Q+B*c+o*E-a*g,A[e+1]=o*Q+B*g+a*c-s*E,A[e+2]=a*Q+B*E+s*g-o*c,A[e+3]=B*Q-s*c-o*g-a*E,A}get x(){return this._x}set x(A){this._x=A,this._onChangeCallback()}get y(){return this._y}set y(A){this._y=A,this._onChangeCallback()}get z(){return this._z}set z(A){this._z=A,this._onChangeCallback()}get w(){return this._w}set w(A){this._w=A,this._onChangeCallback()}set(A,e,t,n){return this._x=A,this._y=e,this._z=t,this._w=n,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(A){return this._x=A.x,this._y=A.y,this._z=A.z,this._w=A.w,this._onChangeCallback(),this}setFromEuler(A,e){const t=A._x,n=A._y,i=A._z,r=A._order,s=Math.cos,o=Math.sin,a=s(t/2),B=s(n/2),c=s(i/2),g=o(t/2),E=o(n/2),Q=o(i/2);switch(r){case"XYZ":this._x=g*B*c+a*E*Q,this._y=a*E*c-g*B*Q,this._z=a*B*Q+g*E*c,this._w=a*B*c-g*E*Q;break;case"YXZ":this._x=g*B*c+a*E*Q,this._y=a*E*c-g*B*Q,this._z=a*B*Q-g*E*c,this._w=a*B*c+g*E*Q;break;case"ZXY":this._x=g*B*c-a*E*Q,this._y=a*E*c+g*B*Q,this._z=a*B*Q+g*E*c,this._w=a*B*c-g*E*Q;break;case"ZYX":this._x=g*B*c-a*E*Q,this._y=a*E*c+g*B*Q,this._z=a*B*Q-g*E*c,this._w=a*B*c+g*E*Q;break;case"YZX":this._x=g*B*c+a*E*Q,this._y=a*E*c+g*B*Q,this._z=a*B*Q-g*E*c,this._w=a*B*c-g*E*Q;break;case"XZY":this._x=g*B*c-a*E*Q,this._y=a*E*c-g*B*Q,this._z=a*B*Q+g*E*c,this._w=a*B*c+g*E*Q;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+r)}return!1!==e&&this._onChangeCallback(),this}setFromAxisAngle(A,e){const t=e/2,n=Math.sin(t);return this._x=A.x*n,this._y=A.y*n,this._z=A.z*n,this._w=Math.cos(t),this._onChangeCallback(),this}setFromRotationMatrix(A){const e=A.elements,t=e[0],n=e[4],i=e[8],r=e[1],s=e[5],o=e[9],a=e[2],B=e[6],c=e[10],g=t+s+c;if(g>0){const A=.5/Math.sqrt(g+1);this._w=.25/A,this._x=(B-o)*A,this._y=(i-a)*A,this._z=(r-n)*A}else if(t>s&&t>c){const A=2*Math.sqrt(1+t-s-c);this._w=(B-o)/A,this._x=.25*A,this._y=(n+r)/A,this._z=(i+a)/A}else if(s>c){const A=2*Math.sqrt(1+s-t-c);this._w=(i-a)/A,this._x=(n+r)/A,this._y=.25*A,this._z=(o+B)/A}else{const A=2*Math.sqrt(1+c-t-s);this._w=(r-n)/A,this._x=(i+a)/A,this._y=(o+B)/A,this._z=.25*A}return this._onChangeCallback(),this}setFromUnitVectors(A,e){let t=A.dot(e)+1;return t<Number.EPSILON?(t=0,Math.abs(A.x)>Math.abs(A.z)?(this._x=-A.y,this._y=A.x,this._z=0,this._w=t):(this._x=0,this._y=-A.z,this._z=A.y,this._w=t)):(this._x=A.y*e.z-A.z*e.y,this._y=A.z*e.x-A.x*e.z,this._z=A.x*e.y-A.y*e.x,this._w=t),this.normalize()}angleTo(A){return 2*Math.acos(Math.abs(Gt(this.dot(A),-1,1)))}rotateTowards(A,e){const t=this.angleTo(A);if(0===t)return this;const n=Math.min(1,e/t);return this.slerp(A,n),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(A){return this._x*A._x+this._y*A._y+this._z*A._z+this._w*A._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let A=this.length();return 0===A?(this._x=0,this._y=0,this._z=0,this._w=1):(A=1/A,this._x=this._x*A,this._y=this._y*A,this._z=this._z*A,this._w=this._w*A),this._onChangeCallback(),this}multiply(A){return this.multiplyQuaternions(this,A)}premultiply(A){return this.multiplyQuaternions(A,this)}multiplyQuaternions(A,e){const t=A._x,n=A._y,i=A._z,r=A._w,s=e._x,o=e._y,a=e._z,B=e._w;return this._x=t*B+r*s+n*a-i*o,this._y=n*B+r*o+i*s-t*a,this._z=i*B+r*a+t*o-n*s,this._w=r*B-t*s-n*o-i*a,this._onChangeCallback(),this}slerp(A,e){if(0===e)return this;if(1===e)return this.copy(A);const t=this._x,n=this._y,i=this._z,r=this._w;let s=r*A._w+t*A._x+n*A._y+i*A._z;if(s<0?(this._w=-A._w,this._x=-A._x,this._y=-A._y,this._z=-A._z,s=-s):this.copy(A),s>=1)return this._w=r,this._x=t,this._y=n,this._z=i,this;const o=1-s*s;if(o<=Number.EPSILON){const A=1-e;return this._w=A*r+e*this._w,this._x=A*t+e*this._x,this._y=A*n+e*this._y,this._z=A*i+e*this._z,this.normalize(),this._onChangeCallback(),this}const a=Math.sqrt(o),B=Math.atan2(a,s),c=Math.sin((1-e)*B)/a,g=Math.sin(e*B)/a;return this._w=r*c+this._w*g,this._x=t*c+this._x*g,this._y=n*c+this._y*g,this._z=i*c+this._z*g,this._onChangeCallback(),this}slerpQuaternions(A,e,t){return this.copy(A).slerp(e,t)}random(){const A=Math.random(),e=Math.sqrt(1-A),t=Math.sqrt(A),n=2*Math.PI*Math.random(),i=2*Math.PI*Math.random();return this.set(e*Math.cos(n),t*Math.sin(i),t*Math.cos(i),e*Math.sin(n))}equals(A){return A._x===this._x&&A._y===this._y&&A._z===this._z&&A._w===this._w}fromArray(A,e=0){return this._x=A[e],this._y=A[e+1],this._z=A[e+2],this._w=A[e+3],this._onChangeCallback(),this}toArray(A=[],e=0){return A[e]=this._x,A[e+1]=this._y,A[e+2]=this._z,A[e+3]=this._w,A}fromBufferAttribute(A,e){return this._x=A.getX(e),this._y=A.getY(e),this._z=A.getZ(e),this._w=A.getW(e),this}toJSON(){return this.toArray()}_onChange(A){return this._onChangeCallback=A,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class Mn{constructor(A=0,e=0,t=0){Mn.prototype.isVector3=!0,this.x=A,this.y=e,this.z=t}set(A,e,t){return void 0===t&&(t=this.z),this.x=A,this.y=e,this.z=t,this}setScalar(A){return this.x=A,this.y=A,this.z=A,this}setX(A){return this.x=A,this}setY(A){return this.y=A,this}setZ(A){return this.z=A,this}setComponent(A,e){switch(A){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+A)}return this}getComponent(A){switch(A){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+A)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(A){return this.x=A.x,this.y=A.y,this.z=A.z,this}add(A){return this.x+=A.x,this.y+=A.y,this.z+=A.z,this}addScalar(A){return this.x+=A,this.y+=A,this.z+=A,this}addVectors(A,e){return this.x=A.x+e.x,this.y=A.y+e.y,this.z=A.z+e.z,this}addScaledVector(A,e){return this.x+=A.x*e,this.y+=A.y*e,this.z+=A.z*e,this}sub(A){return this.x-=A.x,this.y-=A.y,this.z-=A.z,this}subScalar(A){return this.x-=A,this.y-=A,this.z-=A,this}subVectors(A,e){return this.x=A.x-e.x,this.y=A.y-e.y,this.z=A.z-e.z,this}multiply(A){return this.x*=A.x,this.y*=A.y,this.z*=A.z,this}multiplyScalar(A){return this.x*=A,this.y*=A,this.z*=A,this}multiplyVectors(A,e){return this.x=A.x*e.x,this.y=A.y*e.y,this.z=A.z*e.z,this}applyEuler(A){return this.applyQuaternion(mn.setFromEuler(A))}applyAxisAngle(A,e){return this.applyQuaternion(mn.setFromAxisAngle(A,e))}applyMatrix3(A){const e=this.x,t=this.y,n=this.z,i=A.elements;return this.x=i[0]*e+i[3]*t+i[6]*n,this.y=i[1]*e+i[4]*t+i[7]*n,this.z=i[2]*e+i[5]*t+i[8]*n,this}applyNormalMatrix(A){return this.applyMatrix3(A).normalize()}applyMatrix4(A){const e=this.x,t=this.y,n=this.z,i=A.elements,r=1/(i[3]*e+i[7]*t+i[11]*n+i[15]);return this.x=(i[0]*e+i[4]*t+i[8]*n+i[12])*r,this.y=(i[1]*e+i[5]*t+i[9]*n+i[13])*r,this.z=(i[2]*e+i[6]*t+i[10]*n+i[14])*r,this}applyQuaternion(A){const e=this.x,t=this.y,n=this.z,i=A.x,r=A.y,s=A.z,o=A.w,a=o*e+r*n-s*t,B=o*t+s*e-i*n,c=o*n+i*t-r*e,g=-i*e-r*t-s*n;return this.x=a*o+g*-i+B*-s-c*-r,this.y=B*o+g*-r+c*-i-a*-s,this.z=c*o+g*-s+a*-r-B*-i,this}project(A){return this.applyMatrix4(A.matrixWorldInverse).applyMatrix4(A.projectionMatrix)}unproject(A){return this.applyMatrix4(A.projectionMatrixInverse).applyMatrix4(A.matrixWorld)}transformDirection(A){const e=this.x,t=this.y,n=this.z,i=A.elements;return this.x=i[0]*e+i[4]*t+i[8]*n,this.y=i[1]*e+i[5]*t+i[9]*n,this.z=i[2]*e+i[6]*t+i[10]*n,this.normalize()}divide(A){return this.x/=A.x,this.y/=A.y,this.z/=A.z,this}divideScalar(A){return this.multiplyScalar(1/A)}min(A){return this.x=Math.min(this.x,A.x),this.y=Math.min(this.y,A.y),this.z=Math.min(this.z,A.z),this}max(A){return this.x=Math.max(this.x,A.x),this.y=Math.max(this.y,A.y),this.z=Math.max(this.z,A.z),this}clamp(A,e){return this.x=Math.max(A.x,Math.min(e.x,this.x)),this.y=Math.max(A.y,Math.min(e.y,this.y)),this.z=Math.max(A.z,Math.min(e.z,this.z)),this}clampScalar(A,e){return this.x=Math.max(A,Math.min(e,this.x)),this.y=Math.max(A,Math.min(e,this.y)),this.z=Math.max(A,Math.min(e,this.z)),this}clampLength(A,e){const t=this.length();return this.divideScalar(t||1).multiplyScalar(Math.max(A,Math.min(e,t)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(A){return this.x*A.x+this.y*A.y+this.z*A.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(A){return this.normalize().multiplyScalar(A)}lerp(A,e){return this.x+=(A.x-this.x)*e,this.y+=(A.y-this.y)*e,this.z+=(A.z-this.z)*e,this}lerpVectors(A,e,t){return this.x=A.x+(e.x-A.x)*t,this.y=A.y+(e.y-A.y)*t,this.z=A.z+(e.z-A.z)*t,this}cross(A){return this.crossVectors(this,A)}crossVectors(A,e){const t=A.x,n=A.y,i=A.z,r=e.x,s=e.y,o=e.z;return this.x=n*o-i*s,this.y=i*r-t*o,this.z=t*s-n*r,this}projectOnVector(A){const e=A.lengthSq();if(0===e)return this.set(0,0,0);const t=A.dot(this)/e;return this.copy(A).multiplyScalar(t)}projectOnPlane(A){return pn.copy(this).projectOnVector(A),this.sub(pn)}reflect(A){return this.sub(pn.copy(A).multiplyScalar(2*this.dot(A)))}angleTo(A){const e=Math.sqrt(this.lengthSq()*A.lengthSq());if(0===e)return Math.PI/2;const t=this.dot(A)/e;return Math.acos(Gt(t,-1,1))}distanceTo(A){return Math.sqrt(this.distanceToSquared(A))}distanceToSquared(A){const e=this.x-A.x,t=this.y-A.y,n=this.z-A.z;return e*e+t*t+n*n}manhattanDistanceTo(A){return Math.abs(this.x-A.x)+Math.abs(this.y-A.y)+Math.abs(this.z-A.z)}setFromSpherical(A){return this.setFromSphericalCoords(A.radius,A.phi,A.theta)}setFromSphericalCoords(A,e,t){const n=Math.sin(e)*A;return this.x=n*Math.sin(t),this.y=Math.cos(e)*A,this.z=n*Math.cos(t),this}setFromCylindrical(A){return this.setFromCylindricalCoords(A.radius,A.theta,A.y)}setFromCylindricalCoords(A,e,t){return this.x=A*Math.sin(e),this.y=t,this.z=A*Math.cos(e),this}setFromMatrixPosition(A){const e=A.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(A){const e=this.setFromMatrixColumn(A,0).length(),t=this.setFromMatrixColumn(A,1).length(),n=this.setFromMatrixColumn(A,2).length();return this.x=e,this.y=t,this.z=n,this}setFromMatrixColumn(A,e){return this.fromArray(A.elements,4*e)}setFromMatrix3Column(A,e){return this.fromArray(A.elements,3*e)}setFromEuler(A){return this.x=A._x,this.y=A._y,this.z=A._z,this}setFromColor(A){return this.x=A.r,this.y=A.g,this.z=A.b,this}equals(A){return A.x===this.x&&A.y===this.y&&A.z===this.z}fromArray(A,e=0){return this.x=A[e],this.y=A[e+1],this.z=A[e+2],this}toArray(A=[],e=0){return A[e]=this.x,A[e+1]=this.y,A[e+2]=this.z,A}fromBufferAttribute(A,e){return this.x=A.getX(e),this.y=A.getY(e),this.z=A.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const A=2*(Math.random()-.5),e=Math.random()*Math.PI*2,t=Math.sqrt(1-A**2);return this.x=t*Math.cos(e),this.y=t*Math.sin(e),this.z=A,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const pn=new Mn,mn=new In;class Fn{constructor(A=new Mn(1/0,1/0,1/0),e=new Mn(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=A,this.max=e}set(A,e){return this.min.copy(A),this.max.copy(e),this}setFromArray(A){this.makeEmpty();for(let e=0,t=A.length;e<t;e+=3)this.expandByPoint(Yn.fromArray(A,e));return this}setFromBufferAttribute(A){this.makeEmpty();for(let e=0,t=A.count;e<t;e++)this.expandByPoint(Yn.fromBufferAttribute(A,e));return this}setFromPoints(A){this.makeEmpty();for(let e=0,t=A.length;e<t;e++)this.expandByPoint(A[e]);return this}setFromCenterAndSize(A,e){const t=Yn.copy(e).multiplyScalar(.5);return this.min.copy(A).sub(t),this.max.copy(A).add(t),this}setFromObject(A,e=!1){return this.makeEmpty(),this.expandByObject(A,e)}clone(){return(new this.constructor).copy(this)}copy(A){return this.min.copy(A.min),this.max.copy(A.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(A){return this.isEmpty()?A.set(0,0,0):A.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(A){return this.isEmpty()?A.set(0,0,0):A.subVectors(this.max,this.min)}expandByPoint(A){return this.min.min(A),this.max.max(A),this}expandByVector(A){return this.min.sub(A),this.max.add(A),this}expandByScalar(A){return this.min.addScalar(-A),this.max.addScalar(A),this}expandByObject(A,e=!1){if(A.updateWorldMatrix(!1,!1),void 0!==A.boundingBox)null===A.boundingBox&&A.computeBoundingBox(),fn.copy(A.boundingBox),fn.applyMatrix4(A.matrixWorld),this.union(fn);else{const t=A.geometry;if(void 0!==t)if(e&&void 0!==t.attributes&&void 0!==t.attributes.position){const e=t.attributes.position;for(let t=0,n=e.count;t<n;t++)Yn.fromBufferAttribute(e,t).applyMatrix4(A.matrixWorld),this.expandByPoint(Yn)}else null===t.boundingBox&&t.computeBoundingBox(),fn.copy(t.boundingBox),fn.applyMatrix4(A.matrixWorld),this.union(fn)}const t=A.children;for(let A=0,n=t.length;A<n;A++)this.expandByObject(t[A],e);return this}containsPoint(A){return!(A.x<this.min.x||A.x>this.max.x||A.y<this.min.y||A.y>this.max.y||A.z<this.min.z||A.z>this.max.z)}containsBox(A){return this.min.x<=A.min.x&&A.max.x<=this.max.x&&this.min.y<=A.min.y&&A.max.y<=this.max.y&&this.min.z<=A.min.z&&A.max.z<=this.max.z}getParameter(A,e){return e.set((A.x-this.min.x)/(this.max.x-this.min.x),(A.y-this.min.y)/(this.max.y-this.min.y),(A.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(A){return!(A.max.x<this.min.x||A.min.x>this.max.x||A.max.y<this.min.y||A.min.y>this.max.y||A.max.z<this.min.z||A.min.z>this.max.z)}intersectsSphere(A){return this.clampPoint(A.center,Yn),Yn.distanceToSquared(A.center)<=A.radius*A.radius}intersectsPlane(A){let e,t;return A.normal.x>0?(e=A.normal.x*this.min.x,t=A.normal.x*this.max.x):(e=A.normal.x*this.max.x,t=A.normal.x*this.min.x),A.normal.y>0?(e+=A.normal.y*this.min.y,t+=A.normal.y*this.max.y):(e+=A.normal.y*this.max.y,t+=A.normal.y*this.min.y),A.normal.z>0?(e+=A.normal.z*this.min.z,t+=A.normal.z*this.max.z):(e+=A.normal.z*this.max.z,t+=A.normal.z*this.min.z),e<=-A.constant&&t>=-A.constant}intersectsTriangle(A){if(this.isEmpty())return!1;this.getCenter(Gn),Sn.subVectors(this.max,Gn),Nn.subVectors(A.a,Gn),Un.subVectors(A.b,Gn),yn.subVectors(A.c,Gn),Tn.subVectors(Un,Nn),xn.subVectors(yn,Un),Rn.subVectors(Nn,yn);let e=[0,-Tn.z,Tn.y,0,-xn.z,xn.y,0,-Rn.z,Rn.y,Tn.z,0,-Tn.x,xn.z,0,-xn.x,Rn.z,0,-Rn.x,-Tn.y,Tn.x,0,-xn.y,xn.x,0,-Rn.y,Rn.x,0];return!!kn(e,Nn,Un,yn,Sn)&&(e=[1,0,0,0,1,0,0,0,1],!!kn(e,Nn,Un,yn,Sn)&&(bn.crossVectors(Tn,xn),e=[bn.x,bn.y,bn.z],kn(e,Nn,Un,yn,Sn)))}clampPoint(A,e){return e.copy(A).clamp(this.min,this.max)}distanceToPoint(A){return this.clampPoint(A,Yn).distanceTo(A)}getBoundingSphere(A){return this.isEmpty()?A.makeEmpty():(this.getCenter(A.center),A.radius=.5*this.getSize(Yn).length()),A}intersect(A){return this.min.max(A.min),this.max.min(A.max),this.isEmpty()&&this.makeEmpty(),this}union(A){return this.min.min(A.min),this.max.max(A.max),this}applyMatrix4(A){return this.isEmpty()||(Dn[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(A),Dn[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(A),Dn[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(A),Dn[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(A),Dn[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(A),Dn[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(A),Dn[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(A),Dn[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(A),this.setFromPoints(Dn)),this}translate(A){return this.min.add(A),this.max.add(A),this}equals(A){return A.min.equals(this.min)&&A.max.equals(this.max)}}const Dn=[new Mn,new Mn,new Mn,new Mn,new Mn,new Mn,new Mn,new Mn],Yn=new Mn,fn=new Fn,Nn=new Mn,Un=new Mn,yn=new Mn,Tn=new Mn,xn=new Mn,Rn=new Mn,Gn=new Mn,Sn=new Mn,bn=new Mn,Hn=new Mn;function kn(A,e,t,n,i){for(let r=0,s=A.length-3;r<=s;r+=3){Hn.fromArray(A,r);const s=i.x*Math.abs(Hn.x)+i.y*Math.abs(Hn.y)+i.z*Math.abs(Hn.z),o=e.dot(Hn),a=t.dot(Hn),B=n.dot(Hn);if(Math.max(-Math.max(o,a,B),Math.min(o,a,B))>s)return!1}return!0}const vn=new Fn,Jn=new Mn,jn=new Mn;class zn{constructor(A=new Mn,e=-1){this.center=A,this.radius=e}set(A,e){return this.center.copy(A),this.radius=e,this}setFromPoints(A,e){const t=this.center;void 0!==e?t.copy(e):vn.setFromPoints(A).getCenter(t);let n=0;for(let e=0,i=A.length;e<i;e++)n=Math.max(n,t.distanceToSquared(A[e]));return this.radius=Math.sqrt(n),this}copy(A){return this.center.copy(A.center),this.radius=A.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(A){return A.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(A){return A.distanceTo(this.center)-this.radius}intersectsSphere(A){const e=this.radius+A.radius;return A.center.distanceToSquared(this.center)<=e*e}intersectsBox(A){return A.intersectsSphere(this)}intersectsPlane(A){return Math.abs(A.distanceToPoint(this.center))<=this.radius}clampPoint(A,e){const t=this.center.distanceToSquared(A);return e.copy(A),t>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(A){return this.isEmpty()?(A.makeEmpty(),A):(A.set(this.center,this.center),A.expandByScalar(this.radius),A)}applyMatrix4(A){return this.center.applyMatrix4(A),this.radius=this.radius*A.getMaxScaleOnAxis(),this}translate(A){return this.center.add(A),this}expandByPoint(A){if(this.isEmpty())return this.center.copy(A),this.radius=0,this;Jn.subVectors(A,this.center);const e=Jn.lengthSq();if(e>this.radius*this.radius){const A=Math.sqrt(e),t=.5*(A-this.radius);this.center.addScaledVector(Jn,t/A),this.radius+=t}return this}union(A){return A.isEmpty()?this:this.isEmpty()?(this.copy(A),this):(!0===this.center.equals(A.center)?this.radius=Math.max(this.radius,A.radius):(jn.subVectors(A.center,this.center).setLength(A.radius),this.expandByPoint(Jn.copy(A.center).add(jn)),this.expandByPoint(Jn.copy(A.center).sub(jn))),this)}equals(A){return A.center.equals(this.center)&&A.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const Ln=new Mn,Pn=new Mn,On=new Mn,Wn=new Mn,Vn=new Mn,Kn=new Mn,Xn=new Mn;class Zn{constructor(A=new Mn,e=new Mn(0,0,-1)){this.origin=A,this.direction=e}set(A,e){return this.origin.copy(A),this.direction.copy(e),this}copy(A){return this.origin.copy(A.origin),this.direction.copy(A.direction),this}at(A,e){return e.copy(this.origin).addScaledVector(this.direction,A)}lookAt(A){return this.direction.copy(A).sub(this.origin).normalize(),this}recast(A){return this.origin.copy(this.at(A,Ln)),this}closestPointToPoint(A,e){e.subVectors(A,this.origin);const t=e.dot(this.direction);return t<0?e.copy(this.origin):e.copy(this.origin).addScaledVector(this.direction,t)}distanceToPoint(A){return Math.sqrt(this.distanceSqToPoint(A))}distanceSqToPoint(A){const e=Ln.subVectors(A,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(A):(Ln.copy(this.origin).addScaledVector(this.direction,e),Ln.distanceToSquared(A))}distanceSqToSegment(A,e,t,n){Pn.copy(A).add(e).multiplyScalar(.5),On.copy(e).sub(A).normalize(),Wn.copy(this.origin).sub(Pn);const i=.5*A.distanceTo(e),r=-this.direction.dot(On),s=Wn.dot(this.direction),o=-Wn.dot(On),a=Wn.lengthSq(),B=Math.abs(1-r*r);let c,g,E,Q;if(B>0)if(c=r*o-s,g=r*s-o,Q=i*B,c>=0)if(g>=-Q)if(g<=Q){const A=1/B;c*=A,g*=A,E=c*(c+r*g+2*s)+g*(r*c+g+2*o)+a}else g=i,c=Math.max(0,-(r*g+s)),E=-c*c+g*(g+2*o)+a;else g=-i,c=Math.max(0,-(r*g+s)),E=-c*c+g*(g+2*o)+a;else g<=-Q?(c=Math.max(0,-(-r*i+s)),g=c>0?-i:Math.min(Math.max(-i,-o),i),E=-c*c+g*(g+2*o)+a):g<=Q?(c=0,g=Math.min(Math.max(-i,-o),i),E=g*(g+2*o)+a):(c=Math.max(0,-(r*i+s)),g=c>0?i:Math.min(Math.max(-i,-o),i),E=-c*c+g*(g+2*o)+a);else g=r>0?-i:i,c=Math.max(0,-(r*g+s)),E=-c*c+g*(g+2*o)+a;return t&&t.copy(this.origin).addScaledVector(this.direction,c),n&&n.copy(Pn).addScaledVector(On,g),E}intersectSphere(A,e){Ln.subVectors(A.center,this.origin);const t=Ln.dot(this.direction),n=Ln.dot(Ln)-t*t,i=A.radius*A.radius;if(n>i)return null;const r=Math.sqrt(i-n),s=t-r,o=t+r;return o<0?null:s<0?this.at(o,e):this.at(s,e)}intersectsSphere(A){return this.distanceSqToPoint(A.center)<=A.radius*A.radius}distanceToPlane(A){const e=A.normal.dot(this.direction);if(0===e)return 0===A.distanceToPoint(this.origin)?0:null;const t=-(this.origin.dot(A.normal)+A.constant)/e;return t>=0?t:null}intersectPlane(A,e){const t=this.distanceToPlane(A);return null===t?null:this.at(t,e)}intersectsPlane(A){const e=A.distanceToPoint(this.origin);if(0===e)return!0;return A.normal.dot(this.direction)*e<0}intersectBox(A,e){let t,n,i,r,s,o;const a=1/this.direction.x,B=1/this.direction.y,c=1/this.direction.z,g=this.origin;return a>=0?(t=(A.min.x-g.x)*a,n=(A.max.x-g.x)*a):(t=(A.max.x-g.x)*a,n=(A.min.x-g.x)*a),B>=0?(i=(A.min.y-g.y)*B,r=(A.max.y-g.y)*B):(i=(A.max.y-g.y)*B,r=(A.min.y-g.y)*B),t>r||i>n?null:((i>t||isNaN(t))&&(t=i),(r<n||isNaN(n))&&(n=r),c>=0?(s=(A.min.z-g.z)*c,o=(A.max.z-g.z)*c):(s=(A.max.z-g.z)*c,o=(A.min.z-g.z)*c),t>o||s>n?null:((s>t||t!=t)&&(t=s),(o<n||n!=n)&&(n=o),n<0?null:this.at(t>=0?t:n,e)))}intersectsBox(A){return null!==this.intersectBox(A,Ln)}intersectTriangle(A,e,t,n,i){Vn.subVectors(e,A),Kn.subVectors(t,A),Xn.crossVectors(Vn,Kn);let r,s=this.direction.dot(Xn);if(s>0){if(n)return null;r=1}else{if(!(s<0))return null;r=-1,s=-s}Wn.subVectors(this.origin,A);const o=r*this.direction.dot(Kn.crossVectors(Wn,Kn));if(o<0)return null;const a=r*this.direction.dot(Vn.cross(Wn));if(a<0)return null;if(o+a>s)return null;const B=-r*Wn.dot(Xn);return B<0?null:this.at(B/s,i)}applyMatrix4(A){return this.origin.applyMatrix4(A),this.direction.transformDirection(A),this}equals(A){return A.origin.equals(this.origin)&&A.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class _n{constructor(A,e,t,n,i,r,s,o,a,B,c,g,E,Q,l,u){_n.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],void 0!==A&&this.set(A,e,t,n,i,r,s,o,a,B,c,g,E,Q,l,u)}set(A,e,t,n,i,r,s,o,a,B,c,g,E,Q,l,u){const h=this.elements;return h[0]=A,h[4]=e,h[8]=t,h[12]=n,h[1]=i,h[5]=r,h[9]=s,h[13]=o,h[2]=a,h[6]=B,h[10]=c,h[14]=g,h[3]=E,h[7]=Q,h[11]=l,h[15]=u,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new _n).fromArray(this.elements)}copy(A){const e=this.elements,t=A.elements;return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],this}copyPosition(A){const e=this.elements,t=A.elements;return e[12]=t[12],e[13]=t[13],e[14]=t[14],this}setFromMatrix3(A){const e=A.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(A,e,t){return A.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),t.setFromMatrixColumn(this,2),this}makeBasis(A,e,t){return this.set(A.x,e.x,t.x,0,A.y,e.y,t.y,0,A.z,e.z,t.z,0,0,0,0,1),this}extractRotation(A){const e=this.elements,t=A.elements,n=1/qn.setFromMatrixColumn(A,0).length(),i=1/qn.setFromMatrixColumn(A,1).length(),r=1/qn.setFromMatrixColumn(A,2).length();return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=0,e[4]=t[4]*i,e[5]=t[5]*i,e[6]=t[6]*i,e[7]=0,e[8]=t[8]*r,e[9]=t[9]*r,e[10]=t[10]*r,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(A){const e=this.elements,t=A.x,n=A.y,i=A.z,r=Math.cos(t),s=Math.sin(t),o=Math.cos(n),a=Math.sin(n),B=Math.cos(i),c=Math.sin(i);if("XYZ"===A.order){const A=r*B,t=r*c,n=s*B,i=s*c;e[0]=o*B,e[4]=-o*c,e[8]=a,e[1]=t+n*a,e[5]=A-i*a,e[9]=-s*o,e[2]=i-A*a,e[6]=n+t*a,e[10]=r*o}else if("YXZ"===A.order){const A=o*B,t=o*c,n=a*B,i=a*c;e[0]=A+i*s,e[4]=n*s-t,e[8]=r*a,e[1]=r*c,e[5]=r*B,e[9]=-s,e[2]=t*s-n,e[6]=i+A*s,e[10]=r*o}else if("ZXY"===A.order){const A=o*B,t=o*c,n=a*B,i=a*c;e[0]=A-i*s,e[4]=-r*c,e[8]=n+t*s,e[1]=t+n*s,e[5]=r*B,e[9]=i-A*s,e[2]=-r*a,e[6]=s,e[10]=r*o}else if("ZYX"===A.order){const A=r*B,t=r*c,n=s*B,i=s*c;e[0]=o*B,e[4]=n*a-t,e[8]=A*a+i,e[1]=o*c,e[5]=i*a+A,e[9]=t*a-n,e[2]=-a,e[6]=s*o,e[10]=r*o}else if("YZX"===A.order){const A=r*o,t=r*a,n=s*o,i=s*a;e[0]=o*B,e[4]=i-A*c,e[8]=n*c+t,e[1]=c,e[5]=r*B,e[9]=-s*B,e[2]=-a*B,e[6]=t*c+n,e[10]=A-i*c}else if("XZY"===A.order){const A=r*o,t=r*a,n=s*o,i=s*a;e[0]=o*B,e[4]=-c,e[8]=a*B,e[1]=A*c+i,e[5]=r*B,e[9]=t*c-n,e[2]=n*c-t,e[6]=s*B,e[10]=i*c+A}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(A){return this.compose(Ai,A,ei)}lookAt(A,e,t){const n=this.elements;return ii.subVectors(A,e),0===ii.lengthSq()&&(ii.z=1),ii.normalize(),ti.crossVectors(t,ii),0===ti.lengthSq()&&(1===Math.abs(t.z)?ii.x+=1e-4:ii.z+=1e-4,ii.normalize(),ti.crossVectors(t,ii)),ti.normalize(),ni.crossVectors(ii,ti),n[0]=ti.x,n[4]=ni.x,n[8]=ii.x,n[1]=ti.y,n[5]=ni.y,n[9]=ii.y,n[2]=ti.z,n[6]=ni.z,n[10]=ii.z,this}multiply(A){return this.multiplyMatrices(this,A)}premultiply(A){return this.multiplyMatrices(A,this)}multiplyMatrices(A,e){const t=A.elements,n=e.elements,i=this.elements,r=t[0],s=t[4],o=t[8],a=t[12],B=t[1],c=t[5],g=t[9],E=t[13],Q=t[2],l=t[6],u=t[10],h=t[14],w=t[3],C=t[7],d=t[11],I=t[15],M=n[0],p=n[4],m=n[8],F=n[12],D=n[1],Y=n[5],f=n[9],N=n[13],U=n[2],y=n[6],T=n[10],x=n[14],R=n[3],G=n[7],S=n[11],b=n[15];return i[0]=r*M+s*D+o*U+a*R,i[4]=r*p+s*Y+o*y+a*G,i[8]=r*m+s*f+o*T+a*S,i[12]=r*F+s*N+o*x+a*b,i[1]=B*M+c*D+g*U+E*R,i[5]=B*p+c*Y+g*y+E*G,i[9]=B*m+c*f+g*T+E*S,i[13]=B*F+c*N+g*x+E*b,i[2]=Q*M+l*D+u*U+h*R,i[6]=Q*p+l*Y+u*y+h*G,i[10]=Q*m+l*f+u*T+h*S,i[14]=Q*F+l*N+u*x+h*b,i[3]=w*M+C*D+d*U+I*R,i[7]=w*p+C*Y+d*y+I*G,i[11]=w*m+C*f+d*T+I*S,i[15]=w*F+C*N+d*x+I*b,this}multiplyScalar(A){const e=this.elements;return e[0]*=A,e[4]*=A,e[8]*=A,e[12]*=A,e[1]*=A,e[5]*=A,e[9]*=A,e[13]*=A,e[2]*=A,e[6]*=A,e[10]*=A,e[14]*=A,e[3]*=A,e[7]*=A,e[11]*=A,e[15]*=A,this}determinant(){const A=this.elements,e=A[0],t=A[4],n=A[8],i=A[12],r=A[1],s=A[5],o=A[9],a=A[13],B=A[2],c=A[6],g=A[10],E=A[14];return A[3]*(+i*o*c-n*a*c-i*s*g+t*a*g+n*s*E-t*o*E)+A[7]*(+e*o*E-e*a*g+i*r*g-n*r*E+n*a*B-i*o*B)+A[11]*(+e*a*c-e*s*E-i*r*c+t*r*E+i*s*B-t*a*B)+A[15]*(-n*s*B-e*o*c+e*s*g+n*r*c-t*r*g+t*o*B)}transpose(){const A=this.elements;let e;return e=A[1],A[1]=A[4],A[4]=e,e=A[2],A[2]=A[8],A[8]=e,e=A[6],A[6]=A[9],A[9]=e,e=A[3],A[3]=A[12],A[12]=e,e=A[7],A[7]=A[13],A[13]=e,e=A[11],A[11]=A[14],A[14]=e,this}setPosition(A,e,t){const n=this.elements;return A.isVector3?(n[12]=A.x,n[13]=A.y,n[14]=A.z):(n[12]=A,n[13]=e,n[14]=t),this}invert(){const A=this.elements,e=A[0],t=A[1],n=A[2],i=A[3],r=A[4],s=A[5],o=A[6],a=A[7],B=A[8],c=A[9],g=A[10],E=A[11],Q=A[12],l=A[13],u=A[14],h=A[15],w=c*u*a-l*g*a+l*o*E-s*u*E-c*o*h+s*g*h,C=Q*g*a-B*u*a-Q*o*E+r*u*E+B*o*h-r*g*h,d=B*l*a-Q*c*a+Q*s*E-r*l*E-B*s*h+r*c*h,I=Q*c*o-B*l*o-Q*s*g+r*l*g+B*s*u-r*c*u,M=e*w+t*C+n*d+i*I;if(0===M)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const p=1/M;return A[0]=w*p,A[1]=(l*g*i-c*u*i-l*n*E+t*u*E+c*n*h-t*g*h)*p,A[2]=(s*u*i-l*o*i+l*n*a-t*u*a-s*n*h+t*o*h)*p,A[3]=(c*o*i-s*g*i-c*n*a+t*g*a+s*n*E-t*o*E)*p,A[4]=C*p,A[5]=(B*u*i-Q*g*i+Q*n*E-e*u*E-B*n*h+e*g*h)*p,A[6]=(Q*o*i-r*u*i-Q*n*a+e*u*a+r*n*h-e*o*h)*p,A[7]=(r*g*i-B*o*i+B*n*a-e*g*a-r*n*E+e*o*E)*p,A[8]=d*p,A[9]=(Q*c*i-B*l*i-Q*t*E+e*l*E+B*t*h-e*c*h)*p,A[10]=(r*l*i-Q*s*i+Q*t*a-e*l*a-r*t*h+e*s*h)*p,A[11]=(B*s*i-r*c*i-B*t*a+e*c*a+r*t*E-e*s*E)*p,A[12]=I*p,A[13]=(B*l*n-Q*c*n+Q*t*g-e*l*g-B*t*u+e*c*u)*p,A[14]=(Q*s*n-r*l*n-Q*t*o+e*l*o+r*t*u-e*s*u)*p,A[15]=(r*c*n-B*s*n+B*t*o-e*c*o-r*t*g+e*s*g)*p,this}scale(A){const e=this.elements,t=A.x,n=A.y,i=A.z;return e[0]*=t,e[4]*=n,e[8]*=i,e[1]*=t,e[5]*=n,e[9]*=i,e[2]*=t,e[6]*=n,e[10]*=i,e[3]*=t,e[7]*=n,e[11]*=i,this}getMaxScaleOnAxis(){const A=this.elements,e=A[0]*A[0]+A[1]*A[1]+A[2]*A[2],t=A[4]*A[4]+A[5]*A[5]+A[6]*A[6],n=A[8]*A[8]+A[9]*A[9]+A[10]*A[10];return Math.sqrt(Math.max(e,t,n))}makeTranslation(A,e,t){return A.isVector3?this.set(1,0,0,A.x,0,1,0,A.y,0,0,1,A.z,0,0,0,1):this.set(1,0,0,A,0,1,0,e,0,0,1,t,0,0,0,1),this}makeRotationX(A){const e=Math.cos(A),t=Math.sin(A);return this.set(1,0,0,0,0,e,-t,0,0,t,e,0,0,0,0,1),this}makeRotationY(A){const e=Math.cos(A),t=Math.sin(A);return this.set(e,0,t,0,0,1,0,0,-t,0,e,0,0,0,0,1),this}makeRotationZ(A){const e=Math.cos(A),t=Math.sin(A);return this.set(e,-t,0,0,t,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(A,e){const t=Math.cos(e),n=Math.sin(e),i=1-t,r=A.x,s=A.y,o=A.z,a=i*r,B=i*s;return this.set(a*r+t,a*s-n*o,a*o+n*s,0,a*s+n*o,B*s+t,B*o-n*r,0,a*o-n*s,B*o+n*r,i*o*o+t,0,0,0,0,1),this}makeScale(A,e,t){return this.set(A,0,0,0,0,e,0,0,0,0,t,0,0,0,0,1),this}makeShear(A,e,t,n,i,r){return this.set(1,t,i,0,A,1,r,0,e,n,1,0,0,0,0,1),this}compose(A,e,t){const n=this.elements,i=e._x,r=e._y,s=e._z,o=e._w,a=i+i,B=r+r,c=s+s,g=i*a,E=i*B,Q=i*c,l=r*B,u=r*c,h=s*c,w=o*a,C=o*B,d=o*c,I=t.x,M=t.y,p=t.z;return n[0]=(1-(l+h))*I,n[1]=(E+d)*I,n[2]=(Q-C)*I,n[3]=0,n[4]=(E-d)*M,n[5]=(1-(g+h))*M,n[6]=(u+w)*M,n[7]=0,n[8]=(Q+C)*p,n[9]=(u-w)*p,n[10]=(1-(g+l))*p,n[11]=0,n[12]=A.x,n[13]=A.y,n[14]=A.z,n[15]=1,this}decompose(A,e,t){const n=this.elements;let i=qn.set(n[0],n[1],n[2]).length();const r=qn.set(n[4],n[5],n[6]).length(),s=qn.set(n[8],n[9],n[10]).length();this.determinant()<0&&(i=-i),A.x=n[12],A.y=n[13],A.z=n[14],$n.copy(this);const o=1/i,a=1/r,B=1/s;return $n.elements[0]*=o,$n.elements[1]*=o,$n.elements[2]*=o,$n.elements[4]*=a,$n.elements[5]*=a,$n.elements[6]*=a,$n.elements[8]*=B,$n.elements[9]*=B,$n.elements[10]*=B,e.setFromRotationMatrix($n),t.x=i,t.y=r,t.z=s,this}makePerspective(A,e,t,n,i,r,s=Yt){const o=this.elements,a=2*i/(e-A),B=2*i/(t-n),c=(e+A)/(e-A),g=(t+n)/(t-n);let E,Q;if(s===Yt)E=-(r+i)/(r-i),Q=-2*r*i/(r-i);else{if(s!==ft)throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+s);E=-r/(r-i),Q=-r*i/(r-i)}return o[0]=a,o[4]=0,o[8]=c,o[12]=0,o[1]=0,o[5]=B,o[9]=g,o[13]=0,o[2]=0,o[6]=0,o[10]=E,o[14]=Q,o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this}makeOrthographic(A,e,t,n,i,r,s=Yt){const o=this.elements,a=1/(e-A),B=1/(t-n),c=1/(r-i),g=(e+A)*a,E=(t+n)*B;let Q,l;if(s===Yt)Q=(r+i)*c,l=-2*c;else{if(s!==ft)throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+s);Q=i*c,l=-1*c}return o[0]=2*a,o[4]=0,o[8]=0,o[12]=-g,o[1]=0,o[5]=2*B,o[9]=0,o[13]=-E,o[2]=0,o[6]=0,o[10]=l,o[14]=-Q,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this}equals(A){const e=this.elements,t=A.elements;for(let A=0;A<16;A++)if(e[A]!==t[A])return!1;return!0}fromArray(A,e=0){for(let t=0;t<16;t++)this.elements[t]=A[t+e];return this}toArray(A=[],e=0){const t=this.elements;return A[e]=t[0],A[e+1]=t[1],A[e+2]=t[2],A[e+3]=t[3],A[e+4]=t[4],A[e+5]=t[5],A[e+6]=t[6],A[e+7]=t[7],A[e+8]=t[8],A[e+9]=t[9],A[e+10]=t[10],A[e+11]=t[11],A[e+12]=t[12],A[e+13]=t[13],A[e+14]=t[14],A[e+15]=t[15],A}}const qn=new Mn,$n=new _n,Ai=new Mn(0,0,0),ei=new Mn(1,1,1),ti=new Mn,ni=new Mn,ii=new Mn,ri=new _n,si=new In;class oi{constructor(A=0,e=0,t=0,n=oi.DEFAULT_ORDER){this.isEuler=!0,this._x=A,this._y=e,this._z=t,this._order=n}get x(){return this._x}set x(A){this._x=A,this._onChangeCallback()}get y(){return this._y}set y(A){this._y=A,this._onChangeCallback()}get z(){return this._z}set z(A){this._z=A,this._onChangeCallback()}get order(){return this._order}set order(A){this._order=A,this._onChangeCallback()}set(A,e,t,n=this._order){return this._x=A,this._y=e,this._z=t,this._order=n,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(A){return this._x=A._x,this._y=A._y,this._z=A._z,this._order=A._order,this._onChangeCallback(),this}setFromRotationMatrix(A,e=this._order,t=!0){const n=A.elements,i=n[0],r=n[4],s=n[8],o=n[1],a=n[5],B=n[9],c=n[2],g=n[6],E=n[10];switch(e){case"XYZ":this._y=Math.asin(Gt(s,-1,1)),Math.abs(s)<.9999999?(this._x=Math.atan2(-B,E),this._z=Math.atan2(-r,i)):(this._x=Math.atan2(g,a),this._z=0);break;case"YXZ":this._x=Math.asin(-Gt(B,-1,1)),Math.abs(B)<.9999999?(this._y=Math.atan2(s,E),this._z=Math.atan2(o,a)):(this._y=Math.atan2(-c,i),this._z=0);break;case"ZXY":this._x=Math.asin(Gt(g,-1,1)),Math.abs(g)<.9999999?(this._y=Math.atan2(-c,E),this._z=Math.atan2(-r,a)):(this._y=0,this._z=Math.atan2(o,i));break;case"ZYX":this._y=Math.asin(-Gt(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(g,E),this._z=Math.atan2(o,i)):(this._x=0,this._z=Math.atan2(-r,a));break;case"YZX":this._z=Math.asin(Gt(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-B,a),this._y=Math.atan2(-c,i)):(this._x=0,this._y=Math.atan2(s,E));break;case"XZY":this._z=Math.asin(-Gt(r,-1,1)),Math.abs(r)<.9999999?(this._x=Math.atan2(g,a),this._y=Math.atan2(s,i)):(this._x=Math.atan2(-B,E),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,!0===t&&this._onChangeCallback(),this}setFromQuaternion(A,e,t){return ri.makeRotationFromQuaternion(A),this.setFromRotationMatrix(ri,e,t)}setFromVector3(A,e=this._order){return this.set(A.x,A.y,A.z,e)}reorder(A){return si.setFromEuler(this),this.setFromQuaternion(si,A)}equals(A){return A._x===this._x&&A._y===this._y&&A._z===this._z&&A._order===this._order}fromArray(A){return this._x=A[0],this._y=A[1],this._z=A[2],void 0!==A[3]&&(this._order=A[3]),this._onChangeCallback(),this}toArray(A=[],e=0){return A[e]=this._x,A[e+1]=this._y,A[e+2]=this._z,A[e+3]=this._order,A}_onChange(A){return this._onChangeCallback=A,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}oi.DEFAULT_ORDER="XYZ";class ai{constructor(){this.mask=1}set(A){this.mask=(1<<A|0)>>>0}enable(A){this.mask|=1<<A|0}enableAll(){this.mask=-1}toggle(A){this.mask^=1<<A|0}disable(A){this.mask&=~(1<<A|0)}disableAll(){this.mask=0}test(A){return 0!=(this.mask&A.mask)}isEnabled(A){return 0!=(this.mask&(1<<A|0))}}let Bi=0;const ci=new Mn,gi=new In,Ei=new _n,Qi=new Mn,li=new Mn,ui=new Mn,hi=new In,wi=new Mn(1,0,0),Ci=new Mn(0,1,0),di=new Mn(0,0,1),Ii={type:"added"},Mi={type:"removed"};class pi extends Nt{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:Bi++}),this.uuid=Rt(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=pi.DEFAULT_UP.clone();const A=new Mn,e=new oi,t=new In,n=new Mn(1,1,1);e._onChange((function(){t.setFromEuler(e,!1)})),t._onChange((function(){e.setFromQuaternion(t,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:A},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:t},scale:{configurable:!0,enumerable:!0,value:n},modelViewMatrix:{value:new _n},normalMatrix:{value:new Pt}}),this.matrix=new _n,this.matrixWorld=new _n,this.matrixAutoUpdate=pi.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.matrixWorldAutoUpdate=pi.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.layers=new ai,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(A){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(A),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(A){return this.quaternion.premultiply(A),this}setRotationFromAxisAngle(A,e){this.quaternion.setFromAxisAngle(A,e)}setRotationFromEuler(A){this.quaternion.setFromEuler(A,!0)}setRotationFromMatrix(A){this.quaternion.setFromRotationMatrix(A)}setRotationFromQuaternion(A){this.quaternion.copy(A)}rotateOnAxis(A,e){return gi.setFromAxisAngle(A,e),this.quaternion.multiply(gi),this}rotateOnWorldAxis(A,e){return gi.setFromAxisAngle(A,e),this.quaternion.premultiply(gi),this}rotateX(A){return this.rotateOnAxis(wi,A)}rotateY(A){return this.rotateOnAxis(Ci,A)}rotateZ(A){return this.rotateOnAxis(di,A)}translateOnAxis(A,e){return ci.copy(A).applyQuaternion(this.quaternion),this.position.add(ci.multiplyScalar(e)),this}translateX(A){return this.translateOnAxis(wi,A)}translateY(A){return this.translateOnAxis(Ci,A)}translateZ(A){return this.translateOnAxis(di,A)}localToWorld(A){return this.updateWorldMatrix(!0,!1),A.applyMatrix4(this.matrixWorld)}worldToLocal(A){return this.updateWorldMatrix(!0,!1),A.applyMatrix4(Ei.copy(this.matrixWorld).invert())}lookAt(A,e,t){A.isVector3?Qi.copy(A):Qi.set(A,e,t);const n=this.parent;this.updateWorldMatrix(!0,!1),li.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Ei.lookAt(li,Qi,this.up):Ei.lookAt(Qi,li,this.up),this.quaternion.setFromRotationMatrix(Ei),n&&(Ei.extractRotation(n.matrixWorld),gi.setFromRotationMatrix(Ei),this.quaternion.premultiply(gi.invert()))}add(A){if(arguments.length>1){for(let A=0;A<arguments.length;A++)this.add(arguments[A]);return this}return A===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",A),this):(A&&A.isObject3D?(null!==A.parent&&A.parent.remove(A),A.parent=this,this.children.push(A),A.dispatchEvent(Ii)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",A),this)}remove(A){if(arguments.length>1){for(let A=0;A<arguments.length;A++)this.remove(arguments[A]);return this}const e=this.children.indexOf(A);return-1!==e&&(A.parent=null,this.children.splice(e,1),A.dispatchEvent(Mi)),this}removeFromParent(){const A=this.parent;return null!==A&&A.remove(this),this}clear(){for(let A=0;A<this.children.length;A++){const e=this.children[A];e.parent=null,e.dispatchEvent(Mi)}return this.children.length=0,this}attach(A){return this.updateWorldMatrix(!0,!1),Ei.copy(this.matrixWorld).invert(),null!==A.parent&&(A.parent.updateWorldMatrix(!0,!1),Ei.multiply(A.parent.matrixWorld)),A.applyMatrix4(Ei),this.add(A),A.updateWorldMatrix(!1,!0),this}getObjectById(A){return this.getObjectByProperty("id",A)}getObjectByName(A){return this.getObjectByProperty("name",A)}getObjectByProperty(A,e){if(this[A]===e)return this;for(let t=0,n=this.children.length;t<n;t++){const n=this.children[t].getObjectByProperty(A,e);if(void 0!==n)return n}}getObjectsByProperty(A,e){let t=[];this[A]===e&&t.push(this);for(let n=0,i=this.children.length;n<i;n++){const i=this.children[n].getObjectsByProperty(A,e);i.length>0&&(t=t.concat(i))}return t}getWorldPosition(A){return this.updateWorldMatrix(!0,!1),A.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(A){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(li,A,ui),A}getWorldScale(A){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(li,hi,A),A}getWorldDirection(A){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return A.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(A){A(this);const e=this.children;for(let t=0,n=e.length;t<n;t++)e[t].traverse(A)}traverseVisible(A){if(!1===this.visible)return;A(this);const e=this.children;for(let t=0,n=e.length;t<n;t++)e[t].traverseVisible(A)}traverseAncestors(A){const e=this.parent;null!==e&&(A(e),e.traverseAncestors(A))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(A){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||A)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,A=!0);const e=this.children;for(let t=0,n=e.length;t<n;t++){const n=e[t];!0!==n.matrixWorldAutoUpdate&&!0!==A||n.updateMatrixWorld(A)}}updateWorldMatrix(A,e){const t=this.parent;if(!0===A&&null!==t&&!0===t.matrixWorldAutoUpdate&&t.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===e){const A=this.children;for(let e=0,t=A.length;e<t;e++){const t=A[e];!0===t.matrixWorldAutoUpdate&&t.updateWorldMatrix(!1,!0)}}}toJSON(A){const e=void 0===A||"string"==typeof A,t={};e&&(A={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},t.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const n={};function i(e,t){return void 0===e[t.uuid]&&(e[t.uuid]=t.toJSON(A)),t.uuid}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),!0===this.castShadow&&(n.castShadow=!0),!0===this.receiveShadow&&(n.receiveShadow=!0),!1===this.visible&&(n.visible=!1),!1===this.frustumCulled&&(n.frustumCulled=!1),0!==this.renderOrder&&(n.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(n.userData=this.userData),n.layers=this.layers.mask,n.matrix=this.matrix.toArray(),n.up=this.up.toArray(),!1===this.matrixAutoUpdate&&(n.matrixAutoUpdate=!1),this.isInstancedMesh&&(n.type="InstancedMesh",n.count=this.count,n.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(n.instanceColor=this.instanceColor.toJSON())),this.isScene)this.background&&(this.background.isColor?n.background=this.background.toJSON():this.background.isTexture&&(n.background=this.background.toJSON(A).uuid)),this.environment&&this.environment.isTexture&&!0!==this.environment.isRenderTargetTexture&&(n.environment=this.environment.toJSON(A).uuid);else if(this.isMesh||this.isLine||this.isPoints){n.geometry=i(A.geometries,this.geometry);const e=this.geometry.parameters;if(void 0!==e&&void 0!==e.shapes){const t=e.shapes;if(Array.isArray(t))for(let e=0,n=t.length;e<n;e++){const n=t[e];i(A.shapes,n)}else i(A.shapes,t)}}if(this.isSkinnedMesh&&(n.bindMode=this.bindMode,n.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(i(A.skeletons,this.skeleton),n.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const e=[];for(let t=0,n=this.material.length;t<n;t++)e.push(i(A.materials,this.material[t]));n.material=e}else n.material=i(A.materials,this.material);if(this.children.length>0){n.children=[];for(let e=0;e<this.children.length;e++)n.children.push(this.children[e].toJSON(A).object)}if(this.animations.length>0){n.animations=[];for(let e=0;e<this.animations.length;e++){const t=this.animations[e];n.animations.push(i(A.animations,t))}}if(e){const e=r(A.geometries),n=r(A.materials),i=r(A.textures),s=r(A.images),o=r(A.shapes),a=r(A.skeletons),B=r(A.animations),c=r(A.nodes);e.length>0&&(t.geometries=e),n.length>0&&(t.materials=n),i.length>0&&(t.textures=i),s.length>0&&(t.images=s),o.length>0&&(t.shapes=o),a.length>0&&(t.skeletons=a),B.length>0&&(t.animations=B),c.length>0&&(t.nodes=c)}return t.object=n,t;function r(A){const e=[];for(const t in A){const n=A[t];delete n.metadata,e.push(n)}return e}}clone(A){return(new this.constructor).copy(this,A)}copy(A,e=!0){if(this.name=A.name,this.up.copy(A.up),this.position.copy(A.position),this.rotation.order=A.rotation.order,this.quaternion.copy(A.quaternion),this.scale.copy(A.scale),this.matrix.copy(A.matrix),this.matrixWorld.copy(A.matrixWorld),this.matrixAutoUpdate=A.matrixAutoUpdate,this.matrixWorldNeedsUpdate=A.matrixWorldNeedsUpdate,this.matrixWorldAutoUpdate=A.matrixWorldAutoUpdate,this.layers.mask=A.layers.mask,this.visible=A.visible,this.castShadow=A.castShadow,this.receiveShadow=A.receiveShadow,this.frustumCulled=A.frustumCulled,this.renderOrder=A.renderOrder,this.animations=A.animations,this.userData=JSON.parse(JSON.stringify(A.userData)),!0===e)for(let e=0;e<A.children.length;e++){const t=A.children[e];this.add(t.clone())}return this}}pi.DEFAULT_UP=new Mn(0,1,0),pi.DEFAULT_MATRIX_AUTO_UPDATE=!0,pi.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const mi=new Mn,Fi=new Mn,Di=new Mn,Yi=new Mn,fi=new Mn,Ni=new Mn,Ui=new Mn,yi=new Mn,Ti=new Mn,xi=new Mn;let Ri=!1;class Gi{constructor(A=new Mn,e=new Mn,t=new Mn){this.a=A,this.b=e,this.c=t}static getNormal(A,e,t,n){n.subVectors(t,e),mi.subVectors(A,e),n.cross(mi);const i=n.lengthSq();return i>0?n.multiplyScalar(1/Math.sqrt(i)):n.set(0,0,0)}static getBarycoord(A,e,t,n,i){mi.subVectors(n,e),Fi.subVectors(t,e),Di.subVectors(A,e);const r=mi.dot(mi),s=mi.dot(Fi),o=mi.dot(Di),a=Fi.dot(Fi),B=Fi.dot(Di),c=r*a-s*s;if(0===c)return i.set(-2,-1,-1);const g=1/c,E=(a*o-s*B)*g,Q=(r*B-s*o)*g;return i.set(1-E-Q,Q,E)}static containsPoint(A,e,t,n){return this.getBarycoord(A,e,t,n,Yi),Yi.x>=0&&Yi.y>=0&&Yi.x+Yi.y<=1}static getUV(A,e,t,n,i,r,s,o){return!1===Ri&&(console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."),Ri=!0),this.getInterpolation(A,e,t,n,i,r,s,o)}static getInterpolation(A,e,t,n,i,r,s,o){return this.getBarycoord(A,e,t,n,Yi),o.setScalar(0),o.addScaledVector(i,Yi.x),o.addScaledVector(r,Yi.y),o.addScaledVector(s,Yi.z),o}static isFrontFacing(A,e,t,n){return mi.subVectors(t,e),Fi.subVectors(A,e),mi.cross(Fi).dot(n)<0}set(A,e,t){return this.a.copy(A),this.b.copy(e),this.c.copy(t),this}setFromPointsAndIndices(A,e,t,n){return this.a.copy(A[e]),this.b.copy(A[t]),this.c.copy(A[n]),this}setFromAttributeAndIndices(A,e,t,n){return this.a.fromBufferAttribute(A,e),this.b.fromBufferAttribute(A,t),this.c.fromBufferAttribute(A,n),this}clone(){return(new this.constructor).copy(this)}copy(A){return this.a.copy(A.a),this.b.copy(A.b),this.c.copy(A.c),this}getArea(){return mi.subVectors(this.c,this.b),Fi.subVectors(this.a,this.b),.5*mi.cross(Fi).length()}getMidpoint(A){return A.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(A){return Gi.getNormal(this.a,this.b,this.c,A)}getPlane(A){return A.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(A,e){return Gi.getBarycoord(A,this.a,this.b,this.c,e)}getUV(A,e,t,n,i){return!1===Ri&&(console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."),Ri=!0),Gi.getInterpolation(A,this.a,this.b,this.c,e,t,n,i)}getInterpolation(A,e,t,n,i){return Gi.getInterpolation(A,this.a,this.b,this.c,e,t,n,i)}containsPoint(A){return Gi.containsPoint(A,this.a,this.b,this.c)}isFrontFacing(A){return Gi.isFrontFacing(this.a,this.b,this.c,A)}intersectsBox(A){return A.intersectsTriangle(this)}closestPointToPoint(A,e){const t=this.a,n=this.b,i=this.c;let r,s;fi.subVectors(n,t),Ni.subVectors(i,t),yi.subVectors(A,t);const o=fi.dot(yi),a=Ni.dot(yi);if(o<=0&&a<=0)return e.copy(t);Ti.subVectors(A,n);const B=fi.dot(Ti),c=Ni.dot(Ti);if(B>=0&&c<=B)return e.copy(n);const g=o*c-B*a;if(g<=0&&o>=0&&B<=0)return r=o/(o-B),e.copy(t).addScaledVector(fi,r);xi.subVectors(A,i);const E=fi.dot(xi),Q=Ni.dot(xi);if(Q>=0&&E<=Q)return e.copy(i);const l=E*a-o*Q;if(l<=0&&a>=0&&Q<=0)return s=a/(a-Q),e.copy(t).addScaledVector(Ni,s);const u=B*Q-E*c;if(u<=0&&c-B>=0&&E-Q>=0)return Ui.subVectors(i,n),s=(c-B)/(c-B+(E-Q)),e.copy(n).addScaledVector(Ui,s);const h=1/(u+l+g);return r=l*h,s=g*h,e.copy(t).addScaledVector(fi,r).addScaledVector(Ni,s)}equals(A){return A.a.equals(this.a)&&A.b.equals(this.b)&&A.c.equals(this.c)}}let Si=0;class bi extends Nt{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:Si++}),this.uuid=Rt(),this.name="",this.type="Material",this.blending=d,this.side=l,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=R,this.blendDst=G,this.blendEquation=F,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=L,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=rt,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=Oe,this.stencilZFail=Oe,this.stencilZPass=Oe,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(A){this._alphaTest>0!=A>0&&this.version++,this._alphaTest=A}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(A){if(void 0!==A)for(const e in A){const t=A[e];if(void 0===t){console.warn(`THREE.Material: parameter '${e}' has value of undefined.`);continue}const n=this[e];void 0!==n?n&&n.isColor?n.set(t):n&&n.isVector3&&t&&t.isVector3?n.copy(t):this[e]=t:console.warn(`THREE.Material: '${e}' is not a property of THREE.${this.type}.`)}}toJSON(A){const e=void 0===A||"string"==typeof A;e&&(A={textures:{},images:{}});const t={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};function n(A){const e=[];for(const t in A){const n=A[t];delete n.metadata,e.push(n)}return e}if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),this.color&&this.color.isColor&&(t.color=this.color.getHex()),void 0!==this.roughness&&(t.roughness=this.roughness),void 0!==this.metalness&&(t.metalness=this.metalness),void 0!==this.sheen&&(t.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(t.sheenColor=this.sheenColor.getHex()),void 0!==this.sheenRoughness&&(t.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(t.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(t.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(t.specular=this.specular.getHex()),void 0!==this.specularIntensity&&(t.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(t.specularColor=this.specularColor.getHex()),void 0!==this.shininess&&(t.shininess=this.shininess),void 0!==this.clearcoat&&(t.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(t.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(t.clearcoatMap=this.clearcoatMap.toJSON(A).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(t.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(A).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(t.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(A).uuid,t.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),void 0!==this.iridescence&&(t.iridescence=this.iridescence),void 0!==this.iridescenceIOR&&(t.iridescenceIOR=this.iridescenceIOR),void 0!==this.iridescenceThicknessRange&&(t.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(t.iridescenceMap=this.iridescenceMap.toJSON(A).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(t.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(A).uuid),void 0!==this.anisotropy&&(t.anisotropy=this.anisotropy),void 0!==this.anisotropyRotation&&(t.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(t.anisotropyMap=this.anisotropyMap.toJSON(A).uuid),this.map&&this.map.isTexture&&(t.map=this.map.toJSON(A).uuid),this.matcap&&this.matcap.isTexture&&(t.matcap=this.matcap.toJSON(A).uuid),this.alphaMap&&this.alphaMap.isTexture&&(t.alphaMap=this.alphaMap.toJSON(A).uuid),this.lightMap&&this.lightMap.isTexture&&(t.lightMap=this.lightMap.toJSON(A).uuid,t.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(t.aoMap=this.aoMap.toJSON(A).uuid,t.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(t.bumpMap=this.bumpMap.toJSON(A).uuid,t.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(t.normalMap=this.normalMap.toJSON(A).uuid,t.normalMapType=this.normalMapType,t.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(t.displacementMap=this.displacementMap.toJSON(A).uuid,t.displacementScale=this.displacementScale,t.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(t.roughnessMap=this.roughnessMap.toJSON(A).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(t.metalnessMap=this.metalnessMap.toJSON(A).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(t.emissiveMap=this.emissiveMap.toJSON(A).uuid),this.specularMap&&this.specularMap.isTexture&&(t.specularMap=this.specularMap.toJSON(A).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(t.specularIntensityMap=this.specularIntensityMap.toJSON(A).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(t.specularColorMap=this.specularColorMap.toJSON(A).uuid),this.envMap&&this.envMap.isTexture&&(t.envMap=this.envMap.toJSON(A).uuid,void 0!==this.combine&&(t.combine=this.combine)),void 0!==this.envMapIntensity&&(t.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(t.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(t.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(t.gradientMap=this.gradientMap.toJSON(A).uuid),void 0!==this.transmission&&(t.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(t.transmissionMap=this.transmissionMap.toJSON(A).uuid),void 0!==this.thickness&&(t.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(t.thicknessMap=this.thicknessMap.toJSON(A).uuid),void 0!==this.attenuationDistance&&this.attenuationDistance!==1/0&&(t.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationColor&&(t.attenuationColor=this.attenuationColor.getHex()),void 0!==this.size&&(t.size=this.size),null!==this.shadowSide&&(t.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(t.sizeAttenuation=this.sizeAttenuation),this.blending!==d&&(t.blending=this.blending),this.side!==l&&(t.side=this.side),this.vertexColors&&(t.vertexColors=!0),this.opacity<1&&(t.opacity=this.opacity),!0===this.transparent&&(t.transparent=this.transparent),t.depthFunc=this.depthFunc,t.depthTest=this.depthTest,t.depthWrite=this.depthWrite,t.colorWrite=this.colorWrite,t.stencilWrite=this.stencilWrite,t.stencilWriteMask=this.stencilWriteMask,t.stencilFunc=this.stencilFunc,t.stencilRef=this.stencilRef,t.stencilFuncMask=this.stencilFuncMask,t.stencilFail=this.stencilFail,t.stencilZFail=this.stencilZFail,t.stencilZPass=this.stencilZPass,void 0!==this.rotation&&0!==this.rotation&&(t.rotation=this.rotation),!0===this.polygonOffset&&(t.polygonOffset=!0),0!==this.polygonOffsetFactor&&(t.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(t.polygonOffsetUnits=this.polygonOffsetUnits),void 0!==this.linewidth&&1!==this.linewidth&&(t.linewidth=this.linewidth),void 0!==this.dashSize&&(t.dashSize=this.dashSize),void 0!==this.gapSize&&(t.gapSize=this.gapSize),void 0!==this.scale&&(t.scale=this.scale),!0===this.dithering&&(t.dithering=!0),this.alphaTest>0&&(t.alphaTest=this.alphaTest),!0===this.alphaToCoverage&&(t.alphaToCoverage=this.alphaToCoverage),!0===this.premultipliedAlpha&&(t.premultipliedAlpha=this.premultipliedAlpha),!0===this.forceSinglePass&&(t.forceSinglePass=this.forceSinglePass),!0===this.wireframe&&(t.wireframe=this.wireframe),this.wireframeLinewidth>1&&(t.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(t.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(t.wireframeLinejoin=this.wireframeLinejoin),!0===this.flatShading&&(t.flatShading=this.flatShading),!1===this.visible&&(t.visible=!1),!1===this.toneMapped&&(t.toneMapped=!1),!1===this.fog&&(t.fog=!1),Object.keys(this.userData).length>0&&(t.userData=this.userData),e){const e=n(A.textures),i=n(A.images);e.length>0&&(t.textures=e),i.length>0&&(t.images=i)}return t}clone(){return(new this.constructor).copy(this)}copy(A){this.name=A.name,this.blending=A.blending,this.side=A.side,this.vertexColors=A.vertexColors,this.opacity=A.opacity,this.transparent=A.transparent,this.blendSrc=A.blendSrc,this.blendDst=A.blendDst,this.blendEquation=A.blendEquation,this.blendSrcAlpha=A.blendSrcAlpha,this.blendDstAlpha=A.blendDstAlpha,this.blendEquationAlpha=A.blendEquationAlpha,this.depthFunc=A.depthFunc,this.depthTest=A.depthTest,this.depthWrite=A.depthWrite,this.stencilWriteMask=A.stencilWriteMask,this.stencilFunc=A.stencilFunc,this.stencilRef=A.stencilRef,this.stencilFuncMask=A.stencilFuncMask,this.stencilFail=A.stencilFail,this.stencilZFail=A.stencilZFail,this.stencilZPass=A.stencilZPass,this.stencilWrite=A.stencilWrite;const e=A.clippingPlanes;let t=null;if(null!==e){const A=e.length;t=new Array(A);for(let n=0;n!==A;++n)t[n]=e[n].clone()}return this.clippingPlanes=t,this.clipIntersection=A.clipIntersection,this.clipShadows=A.clipShadows,this.shadowSide=A.shadowSide,this.colorWrite=A.colorWrite,this.precision=A.precision,this.polygonOffset=A.polygonOffset,this.polygonOffsetFactor=A.polygonOffsetFactor,this.polygonOffsetUnits=A.polygonOffsetUnits,this.dithering=A.dithering,this.alphaTest=A.alphaTest,this.alphaToCoverage=A.alphaToCoverage,this.premultipliedAlpha=A.premultipliedAlpha,this.forceSinglePass=A.forceSinglePass,this.visible=A.visible,this.toneMapped=A.toneMapped,this.userData=JSON.parse(JSON.stringify(A.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(A){!0===A&&this.version++}}const Hi={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},ki={h:0,s:0,l:0},vi={h:0,s:0,l:0};function Ji(A,e,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?A+6*(e-A)*t:t<.5?e:t<2/3?A+6*(e-A)*(2/3-t):A}class ji{constructor(A,e,t){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(A,e,t)}set(A,e,t){if(void 0===e&&void 0===t){const e=A;e&&e.isColor?this.copy(e):"number"==typeof e?this.setHex(e):"string"==typeof e&&this.setStyle(e)}else this.setRGB(A,e,t);return this}setScalar(A){return this.r=A,this.g=A,this.b=A,this}setHex(A,e=je){return A=Math.floor(A),this.r=(A>>16&255)/255,this.g=(A>>8&255)/255,this.b=(255&A)/255,rn.toWorkingColorSpace(this,e),this}setRGB(A,e,t,n=rn.workingColorSpace){return this.r=A,this.g=e,this.b=t,rn.toWorkingColorSpace(this,n),this}setHSL(A,e,t,n=rn.workingColorSpace){if(A=St(A,1),e=Gt(e,0,1),t=Gt(t,0,1),0===e)this.r=this.g=this.b=t;else{const n=t<=.5?t*(1+e):t+e-t*e,i=2*t-n;this.r=Ji(i,n,A+1/3),this.g=Ji(i,n,A),this.b=Ji(i,n,A-1/3)}return rn.toWorkingColorSpace(this,n),this}setStyle(A,e=je){function t(e){void 0!==e&&parseFloat(e)<1&&console.warn("THREE.Color: Alpha component of "+A+" will be ignored.")}let n;if(n=/^(\w+)\(([^\)]*)\)/.exec(A)){let i;const r=n[1],s=n[2];switch(r){case"rgb":case"rgba":if(i=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return t(i[4]),this.setRGB(Math.min(255,parseInt(i[1],10))/255,Math.min(255,parseInt(i[2],10))/255,Math.min(255,parseInt(i[3],10))/255,e);if(i=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return t(i[4]),this.setRGB(Math.min(100,parseInt(i[1],10))/100,Math.min(100,parseInt(i[2],10))/100,Math.min(100,parseInt(i[3],10))/100,e);break;case"hsl":case"hsla":if(i=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return t(i[4]),this.setHSL(parseFloat(i[1])/360,parseFloat(i[2])/100,parseFloat(i[3])/100,e);break;default:console.warn("THREE.Color: Unknown color model "+A)}}else if(n=/^\#([A-Fa-f\d]+)$/.exec(A)){const t=n[1],i=t.length;if(3===i)return this.setRGB(parseInt(t.charAt(0),16)/15,parseInt(t.charAt(1),16)/15,parseInt(t.charAt(2),16)/15,e);if(6===i)return this.setHex(parseInt(t,16),e);console.warn("THREE.Color: Invalid hex color "+A)}else if(A&&A.length>0)return this.setColorName(A,e);return this}setColorName(A,e=je){const t=Hi[A.toLowerCase()];return void 0!==t?this.setHex(t,e):console.warn("THREE.Color: Unknown color "+A),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(A){return this.r=A.r,this.g=A.g,this.b=A.b,this}copySRGBToLinear(A){return this.r=qt(A.r),this.g=qt(A.g),this.b=qt(A.b),this}copyLinearToSRGB(A){return this.r=$t(A.r),this.g=$t(A.g),this.b=$t(A.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(A=je){return rn.fromWorkingColorSpace(zi.copy(this),A),65536*Math.round(Gt(255*zi.r,0,255))+256*Math.round(Gt(255*zi.g,0,255))+Math.round(Gt(255*zi.b,0,255))}getHexString(A=je){return("000000"+this.getHex(A).toString(16)).slice(-6)}getHSL(A,e=rn.workingColorSpace){rn.fromWorkingColorSpace(zi.copy(this),e);const t=zi.r,n=zi.g,i=zi.b,r=Math.max(t,n,i),s=Math.min(t,n,i);let o,a;const B=(s+r)/2;if(s===r)o=0,a=0;else{const A=r-s;switch(a=B<=.5?A/(r+s):A/(2-r-s),r){case t:o=(n-i)/A+(n<i?6:0);break;case n:o=(i-t)/A+2;break;case i:o=(t-n)/A+4}o/=6}return A.h=o,A.s=a,A.l=B,A}getRGB(A,e=rn.workingColorSpace){return rn.fromWorkingColorSpace(zi.copy(this),e),A.r=zi.r,A.g=zi.g,A.b=zi.b,A}getStyle(A=je){rn.fromWorkingColorSpace(zi.copy(this),A);const e=zi.r,t=zi.g,n=zi.b;return A!==je?`color(${A} ${e.toFixed(3)} ${t.toFixed(3)} ${n.toFixed(3)})`:`rgb(${Math.round(255*e)},${Math.round(255*t)},${Math.round(255*n)})`}offsetHSL(A,e,t){return this.getHSL(ki),ki.h+=A,ki.s+=e,ki.l+=t,this.setHSL(ki.h,ki.s,ki.l),this}add(A){return this.r+=A.r,this.g+=A.g,this.b+=A.b,this}addColors(A,e){return this.r=A.r+e.r,this.g=A.g+e.g,this.b=A.b+e.b,this}addScalar(A){return this.r+=A,this.g+=A,this.b+=A,this}sub(A){return this.r=Math.max(0,this.r-A.r),this.g=Math.max(0,this.g-A.g),this.b=Math.max(0,this.b-A.b),this}multiply(A){return this.r*=A.r,this.g*=A.g,this.b*=A.b,this}multiplyScalar(A){return this.r*=A,this.g*=A,this.b*=A,this}lerp(A,e){return this.r+=(A.r-this.r)*e,this.g+=(A.g-this.g)*e,this.b+=(A.b-this.b)*e,this}lerpColors(A,e,t){return this.r=A.r+(e.r-A.r)*t,this.g=A.g+(e.g-A.g)*t,this.b=A.b+(e.b-A.b)*t,this}lerpHSL(A,e){this.getHSL(ki),A.getHSL(vi);const t=bt(ki.h,vi.h,e),n=bt(ki.s,vi.s,e),i=bt(ki.l,vi.l,e);return this.setHSL(t,n,i),this}setFromVector3(A){return this.r=A.x,this.g=A.y,this.b=A.z,this}applyMatrix3(A){const e=this.r,t=this.g,n=this.b,i=A.elements;return this.r=i[0]*e+i[3]*t+i[6]*n,this.g=i[1]*e+i[4]*t+i[7]*n,this.b=i[2]*e+i[5]*t+i[8]*n,this}equals(A){return A.r===this.r&&A.g===this.g&&A.b===this.b}fromArray(A,e=0){return this.r=A[e],this.g=A[e+1],this.b=A[e+2],this}toArray(A=[],e=0){return A[e]=this.r,A[e+1]=this.g,A[e+2]=this.b,A}fromBufferAttribute(A,e){return this.r=A.getX(e),this.g=A.getY(e),this.b=A.getZ(e),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const zi=new ji;ji.NAMES=Hi;class Li extends bi{constructor(A){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new ji(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=K,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(A)}copy(A){return super.copy(A),this.color.copy(A.color),this.map=A.map,this.lightMap=A.lightMap,this.lightMapIntensity=A.lightMapIntensity,this.aoMap=A.aoMap,this.aoMapIntensity=A.aoMapIntensity,this.specularMap=A.specularMap,this.alphaMap=A.alphaMap,this.envMap=A.envMap,this.combine=A.combine,this.reflectivity=A.reflectivity,this.refractionRatio=A.refractionRatio,this.wireframe=A.wireframe,this.wireframeLinewidth=A.wireframeLinewidth,this.wireframeLinecap=A.wireframeLinecap,this.wireframeLinejoin=A.wireframeLinejoin,this.fog=A.fog,this}}const Pi=Oi();function Oi(){const A=new ArrayBuffer(4),e=new Float32Array(A),t=new Uint32Array(A),n=new Uint32Array(512),i=new Uint32Array(512);for(let A=0;A<256;++A){const e=A-127;e<-27?(n[A]=0,n[256|A]=32768,i[A]=24,i[256|A]=24):e<-14?(n[A]=1024>>-e-14,n[256|A]=1024>>-e-14|32768,i[A]=-e-1,i[256|A]=-e-1):e<=15?(n[A]=e+15<<10,n[256|A]=e+15<<10|32768,i[A]=13,i[256|A]=13):e<128?(n[A]=31744,n[256|A]=64512,i[A]=24,i[256|A]=24):(n[A]=31744,n[256|A]=64512,i[A]=13,i[256|A]=13)}const r=new Uint32Array(2048),s=new Uint32Array(64),o=new Uint32Array(64);for(let A=1;A<1024;++A){let e=A<<13,t=0;for(;0==(8388608&e);)e<<=1,t-=8388608;e&=-8388609,t+=947912704,r[A]=e|t}for(let A=1024;A<2048;++A)r[A]=939524096+(A-1024<<13);for(let A=1;A<31;++A)s[A]=A<<23;s[31]=1199570944,s[32]=2147483648;for(let A=33;A<63;++A)s[A]=2147483648+(A-32<<23);s[63]=3347054592;for(let A=1;A<64;++A)32!==A&&(o[A]=1024);return{floatView:e,uint32View:t,baseTable:n,shiftTable:i,mantissaTable:r,exponentTable:s,offsetTable:o}}function Wi(A){Math.abs(A)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),A=Gt(A,-65504,65504),Pi.floatView[0]=A;const e=Pi.uint32View[0],t=e>>23&511;return Pi.baseTable[t]+((8388607&e)>>Pi.shiftTable[t])}function Vi(A){const e=A>>10;return Pi.uint32View[0]=Pi.mantissaTable[Pi.offsetTable[e]+(1023&A)]+Pi.exponentTable[e],Pi.floatView[0]}const Ki={toHalfFloat:Wi,fromHalfFloat:Vi},Xi=new Mn,Zi=new Lt;class _i{constructor(A,e,t=!1){if(Array.isArray(A))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=A,this.itemSize=e,this.count=void 0!==A?A.length/e:0,this.normalized=t,this.usage=lt,this.updateRange={offset:0,count:-1},this.gpuType=NA,this.version=0}onUploadCallback(){}set needsUpdate(A){!0===A&&this.version++}setUsage(A){return this.usage=A,this}copy(A){return this.name=A.name,this.array=new A.array.constructor(A.array),this.itemSize=A.itemSize,this.count=A.count,this.normalized=A.normalized,this.usage=A.usage,this.gpuType=A.gpuType,this}copyAt(A,e,t){A*=this.itemSize,t*=e.itemSize;for(let n=0,i=this.itemSize;n<i;n++)this.array[A+n]=e.array[t+n];return this}copyArray(A){return this.array.set(A),this}applyMatrix3(A){if(2===this.itemSize)for(let e=0,t=this.count;e<t;e++)Zi.fromBufferAttribute(this,e),Zi.applyMatrix3(A),this.setXY(e,Zi.x,Zi.y);else if(3===this.itemSize)for(let e=0,t=this.count;e<t;e++)Xi.fromBufferAttribute(this,e),Xi.applyMatrix3(A),this.setXYZ(e,Xi.x,Xi.y,Xi.z);return this}applyMatrix4(A){for(let e=0,t=this.count;e<t;e++)Xi.fromBufferAttribute(this,e),Xi.applyMatrix4(A),this.setXYZ(e,Xi.x,Xi.y,Xi.z);return this}applyNormalMatrix(A){for(let e=0,t=this.count;e<t;e++)Xi.fromBufferAttribute(this,e),Xi.applyNormalMatrix(A),this.setXYZ(e,Xi.x,Xi.y,Xi.z);return this}transformDirection(A){for(let e=0,t=this.count;e<t;e++)Xi.fromBufferAttribute(this,e),Xi.transformDirection(A),this.setXYZ(e,Xi.x,Xi.y,Xi.z);return this}set(A,e=0){return this.array.set(A,e),this}getX(A){let e=this.array[A*this.itemSize];return this.normalized&&(e=Jt(e,this.array)),e}setX(A,e){return this.normalized&&(e=jt(e,this.array)),this.array[A*this.itemSize]=e,this}getY(A){let e=this.array[A*this.itemSize+1];return this.normalized&&(e=Jt(e,this.array)),e}setY(A,e){return this.normalized&&(e=jt(e,this.array)),this.array[A*this.itemSize+1]=e,this}getZ(A){let e=this.array[A*this.itemSize+2];return this.normalized&&(e=Jt(e,this.array)),e}setZ(A,e){return this.normalized&&(e=jt(e,this.array)),this.array[A*this.itemSize+2]=e,this}getW(A){let e=this.array[A*this.itemSize+3];return this.normalized&&(e=Jt(e,this.array)),e}setW(A,e){return this.normalized&&(e=jt(e,this.array)),this.array[A*this.itemSize+3]=e,this}setXY(A,e,t){return A*=this.itemSize,this.normalized&&(e=jt(e,this.array),t=jt(t,this.array)),this.array[A+0]=e,this.array[A+1]=t,this}setXYZ(A,e,t,n){return A*=this.itemSize,this.normalized&&(e=jt(e,this.array),t=jt(t,this.array),n=jt(n,this.array)),this.array[A+0]=e,this.array[A+1]=t,this.array[A+2]=n,this}setXYZW(A,e,t,n,i){return A*=this.itemSize,this.normalized&&(e=jt(e,this.array),t=jt(t,this.array),n=jt(n,this.array),i=jt(i,this.array)),this.array[A+0]=e,this.array[A+1]=t,this.array[A+2]=n,this.array[A+3]=i,this}onUpload(A){return this.onUploadCallback=A,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const A={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return""!==this.name&&(A.name=this.name),this.usage!==lt&&(A.usage=this.usage),0===this.updateRange.offset&&-1===this.updateRange.count||(A.updateRange=this.updateRange),A}copyColorsArray(){console.error("THREE.BufferAttribute: copyColorsArray() was removed in r144.")}copyVector2sArray(){console.error("THREE.BufferAttribute: copyVector2sArray() was removed in r144.")}copyVector3sArray(){console.error("THREE.BufferAttribute: copyVector3sArray() was removed in r144.")}copyVector4sArray(){console.error("THREE.BufferAttribute: copyVector4sArray() was removed in r144.")}}class qi extends _i{constructor(A,e,t){super(new Int8Array(A),e,t)}}class $i extends _i{constructor(A,e,t){super(new Uint8Array(A),e,t)}}class Ar extends _i{constructor(A,e,t){super(new Uint8ClampedArray(A),e,t)}}class er extends _i{constructor(A,e,t){super(new Int16Array(A),e,t)}}class tr extends _i{constructor(A,e,t){super(new Uint16Array(A),e,t)}}class nr extends _i{constructor(A,e,t){super(new Int32Array(A),e,t)}}class ir extends _i{constructor(A,e,t){super(new Uint32Array(A),e,t)}}class rr extends _i{constructor(A,e,t){super(new Uint16Array(A),e,t),this.isFloat16BufferAttribute=!0}getX(A){let e=Vi(this.array[A*this.itemSize]);return this.normalized&&(e=Jt(e,this.array)),e}setX(A,e){return this.normalized&&(e=jt(e,this.array)),this.array[A*this.itemSize]=Wi(e),this}getY(A){let e=Vi(this.array[A*this.itemSize+1]);return this.normalized&&(e=Jt(e,this.array)),e}setY(A,e){return this.normalized&&(e=jt(e,this.array)),this.array[A*this.itemSize+1]=Wi(e),this}getZ(A){let e=Vi(this.array[A*this.itemSize+2]);return this.normalized&&(e=Jt(e,this.array)),e}setZ(A,e){return this.normalized&&(e=jt(e,this.array)),this.array[A*this.itemSize+2]=Wi(e),this}getW(A){let e=Vi(this.array[A*this.itemSize+3]);return this.normalized&&(e=Jt(e,this.array)),e}setW(A,e){return this.normalized&&(e=jt(e,this.array)),this.array[A*this.itemSize+3]=Wi(e),this}setXY(A,e,t){return A*=this.itemSize,this.normalized&&(e=jt(e,this.array),t=jt(t,this.array)),this.array[A+0]=Wi(e),this.array[A+1]=Wi(t),this}setXYZ(A,e,t,n){return A*=this.itemSize,this.normalized&&(e=jt(e,this.array),t=jt(t,this.array),n=jt(n,this.array)),this.array[A+0]=Wi(e),this.array[A+1]=Wi(t),this.array[A+2]=Wi(n),this}setXYZW(A,e,t,n,i){return A*=this.itemSize,this.normalized&&(e=jt(e,this.array),t=jt(t,this.array),n=jt(n,this.array),i=jt(i,this.array)),this.array[A+0]=Wi(e),this.array[A+1]=Wi(t),this.array[A+2]=Wi(n),this.array[A+3]=Wi(i),this}}class sr extends _i{constructor(A,e,t){super(new Float32Array(A),e,t)}}class or extends _i{constructor(A,e,t){super(new Float64Array(A),e,t)}}let ar=0;const Br=new _n,cr=new pi,gr=new Mn,Er=new Fn,Qr=new Fn,lr=new Mn;class ur extends Nt{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:ar++}),this.uuid=Rt(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(A){return Array.isArray(A)?this.index=new(Wt(A)?ir:tr)(A,1):this.index=A,this}getAttribute(A){return this.attributes[A]}setAttribute(A,e){return this.attributes[A]=e,this}deleteAttribute(A){return delete this.attributes[A],this}hasAttribute(A){return void 0!==this.attributes[A]}addGroup(A,e,t=0){this.groups.push({start:A,count:e,materialIndex:t})}clearGroups(){this.groups=[]}setDrawRange(A,e){this.drawRange.start=A,this.drawRange.count=e}applyMatrix4(A){const e=this.attributes.position;void 0!==e&&(e.applyMatrix4(A),e.needsUpdate=!0);const t=this.attributes.normal;if(void 0!==t){const e=(new Pt).getNormalMatrix(A);t.applyNormalMatrix(e),t.needsUpdate=!0}const n=this.attributes.tangent;return void 0!==n&&(n.transformDirection(A),n.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(A){return Br.makeRotationFromQuaternion(A),this.applyMatrix4(Br),this}rotateX(A){return Br.makeRotationX(A),this.applyMatrix4(Br),this}rotateY(A){return Br.makeRotationY(A),this.applyMatrix4(Br),this}rotateZ(A){return Br.makeRotationZ(A),this.applyMatrix4(Br),this}translate(A,e,t){return Br.makeTranslation(A,e,t),this.applyMatrix4(Br),this}scale(A,e,t){return Br.makeScale(A,e,t),this.applyMatrix4(Br),this}lookAt(A){return cr.lookAt(A),cr.updateMatrix(),this.applyMatrix4(cr.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(gr).negate(),this.translate(gr.x,gr.y,gr.z),this}setFromPoints(A){const e=[];for(let t=0,n=A.length;t<n;t++){const n=A[t];e.push(n.x,n.y,n.z||0)}return this.setAttribute("position",new sr(e,3)),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new Fn);const A=this.attributes.position,e=this.morphAttributes.position;if(A&&A.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingBox.set(new Mn(-1/0,-1/0,-1/0),new Mn(1/0,1/0,1/0));if(void 0!==A){if(this.boundingBox.setFromBufferAttribute(A),e)for(let A=0,t=e.length;A<t;A++){const t=e[A];Er.setFromBufferAttribute(t),this.morphTargetsRelative?(lr.addVectors(this.boundingBox.min,Er.min),this.boundingBox.expandByPoint(lr),lr.addVectors(this.boundingBox.max,Er.max),this.boundingBox.expandByPoint(lr)):(this.boundingBox.expandByPoint(Er.min),this.boundingBox.expandByPoint(Er.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new zn);const A=this.attributes.position,e=this.morphAttributes.position;if(A&&A.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingSphere.set(new Mn,1/0);if(A){const t=this.boundingSphere.center;if(Er.setFromBufferAttribute(A),e)for(let A=0,t=e.length;A<t;A++){const t=e[A];Qr.setFromBufferAttribute(t),this.morphTargetsRelative?(lr.addVectors(Er.min,Qr.min),Er.expandByPoint(lr),lr.addVectors(Er.max,Qr.max),Er.expandByPoint(lr)):(Er.expandByPoint(Qr.min),Er.expandByPoint(Qr.max))}Er.getCenter(t);let n=0;for(let e=0,i=A.count;e<i;e++)lr.fromBufferAttribute(A,e),n=Math.max(n,t.distanceToSquared(lr));if(e)for(let i=0,r=e.length;i<r;i++){const r=e[i],s=this.morphTargetsRelative;for(let e=0,i=r.count;e<i;e++)lr.fromBufferAttribute(r,e),s&&(gr.fromBufferAttribute(A,e),lr.add(gr)),n=Math.max(n,t.distanceToSquared(lr))}this.boundingSphere.radius=Math.sqrt(n),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const A=this.index,e=this.attributes;if(null===A||void 0===e.position||void 0===e.normal||void 0===e.uv)return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");const t=A.array,n=e.position.array,i=e.normal.array,r=e.uv.array,s=n.length/3;!1===this.hasAttribute("tangent")&&this.setAttribute("tangent",new _i(new Float32Array(4*s),4));const o=this.getAttribute("tangent").array,a=[],B=[];for(let A=0;A<s;A++)a[A]=new Mn,B[A]=new Mn;const c=new Mn,g=new Mn,E=new Mn,Q=new Lt,l=new Lt,u=new Lt,h=new Mn,w=new Mn;function C(A,e,t){c.fromArray(n,3*A),g.fromArray(n,3*e),E.fromArray(n,3*t),Q.fromArray(r,2*A),l.fromArray(r,2*e),u.fromArray(r,2*t),g.sub(c),E.sub(c),l.sub(Q),u.sub(Q);const i=1/(l.x*u.y-u.x*l.y);isFinite(i)&&(h.copy(g).multiplyScalar(u.y).addScaledVector(E,-l.y).multiplyScalar(i),w.copy(E).multiplyScalar(l.x).addScaledVector(g,-u.x).multiplyScalar(i),a[A].add(h),a[e].add(h),a[t].add(h),B[A].add(w),B[e].add(w),B[t].add(w))}let d=this.groups;0===d.length&&(d=[{start:0,count:t.length}]);for(let A=0,e=d.length;A<e;++A){const e=d[A],n=e.start;for(let A=n,i=n+e.count;A<i;A+=3)C(t[A+0],t[A+1],t[A+2])}const I=new Mn,M=new Mn,p=new Mn,m=new Mn;function F(A){p.fromArray(i,3*A),m.copy(p);const e=a[A];I.copy(e),I.sub(p.multiplyScalar(p.dot(e))).normalize(),M.crossVectors(m,e);const t=M.dot(B[A])<0?-1:1;o[4*A]=I.x,o[4*A+1]=I.y,o[4*A+2]=I.z,o[4*A+3]=t}for(let A=0,e=d.length;A<e;++A){const e=d[A],n=e.start;for(let A=n,i=n+e.count;A<i;A+=3)F(t[A+0]),F(t[A+1]),F(t[A+2])}}computeVertexNormals(){const A=this.index,e=this.getAttribute("position");if(void 0!==e){let t=this.getAttribute("normal");if(void 0===t)t=new _i(new Float32Array(3*e.count),3),this.setAttribute("normal",t);else for(let A=0,e=t.count;A<e;A++)t.setXYZ(A,0,0,0);const n=new Mn,i=new Mn,r=new Mn,s=new Mn,o=new Mn,a=new Mn,B=new Mn,c=new Mn;if(A)for(let g=0,E=A.count;g<E;g+=3){const E=A.getX(g+0),Q=A.getX(g+1),l=A.getX(g+2);n.fromBufferAttribute(e,E),i.fromBufferAttribute(e,Q),r.fromBufferAttribute(e,l),B.subVectors(r,i),c.subVectors(n,i),B.cross(c),s.fromBufferAttribute(t,E),o.fromBufferAttribute(t,Q),a.fromBufferAttribute(t,l),s.add(B),o.add(B),a.add(B),t.setXYZ(E,s.x,s.y,s.z),t.setXYZ(Q,o.x,o.y,o.z),t.setXYZ(l,a.x,a.y,a.z)}else for(let A=0,s=e.count;A<s;A+=3)n.fromBufferAttribute(e,A+0),i.fromBufferAttribute(e,A+1),r.fromBufferAttribute(e,A+2),B.subVectors(r,i),c.subVectors(n,i),B.cross(c),t.setXYZ(A+0,B.x,B.y,B.z),t.setXYZ(A+1,B.x,B.y,B.z),t.setXYZ(A+2,B.x,B.y,B.z);this.normalizeNormals(),t.needsUpdate=!0}}merge(){return console.error("THREE.BufferGeometry.merge() has been removed. Use THREE.BufferGeometryUtils.mergeGeometries() instead."),this}normalizeNormals(){const A=this.attributes.normal;for(let e=0,t=A.count;e<t;e++)lr.fromBufferAttribute(A,e),lr.normalize(),A.setXYZ(e,lr.x,lr.y,lr.z)}toNonIndexed(){function A(A,e){const t=A.array,n=A.itemSize,i=A.normalized,r=new t.constructor(e.length*n);let s=0,o=0;for(let i=0,a=e.length;i<a;i++){s=A.isInterleavedBufferAttribute?e[i]*A.data.stride+A.offset:e[i]*n;for(let A=0;A<n;A++)r[o++]=t[s++]}return new _i(r,n,i)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new ur,t=this.index.array,n=this.attributes;for(const i in n){const r=A(n[i],t);e.setAttribute(i,r)}const i=this.morphAttributes;for(const n in i){const r=[],s=i[n];for(let e=0,n=s.length;e<n;e++){const n=A(s[e],t);r.push(n)}e.morphAttributes[n]=r}e.morphTargetsRelative=this.morphTargetsRelative;const r=this.groups;for(let A=0,t=r.length;A<t;A++){const t=r[A];e.addGroup(t.start,t.count,t.materialIndex)}return e}toJSON(){const A={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(A.uuid=this.uuid,A.type=this.type,""!==this.name&&(A.name=this.name),Object.keys(this.userData).length>0&&(A.userData=this.userData),void 0!==this.parameters){const e=this.parameters;for(const t in e)void 0!==e[t]&&(A[t]=e[t]);return A}A.data={attributes:{}};const e=this.index;null!==e&&(A.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const t=this.attributes;for(const e in t){const n=t[e];A.data.attributes[e]=n.toJSON(A.data)}const n={};let i=!1;for(const e in this.morphAttributes){const t=this.morphAttributes[e],r=[];for(let e=0,n=t.length;e<n;e++){const n=t[e];r.push(n.toJSON(A.data))}r.length>0&&(n[e]=r,i=!0)}i&&(A.data.morphAttributes=n,A.data.morphTargetsRelative=this.morphTargetsRelative);const r=this.groups;r.length>0&&(A.data.groups=JSON.parse(JSON.stringify(r)));const s=this.boundingSphere;return null!==s&&(A.data.boundingSphere={center:s.center.toArray(),radius:s.radius}),A}clone(){return(new this.constructor).copy(this)}copy(A){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=A.name;const t=A.index;null!==t&&this.setIndex(t.clone(e));const n=A.attributes;for(const A in n){const t=n[A];this.setAttribute(A,t.clone(e))}const i=A.morphAttributes;for(const A in i){const t=[],n=i[A];for(let A=0,i=n.length;A<i;A++)t.push(n[A].clone(e));this.morphAttributes[A]=t}this.morphTargetsRelative=A.morphTargetsRelative;const r=A.groups;for(let A=0,e=r.length;A<e;A++){const e=r[A];this.addGroup(e.start,e.count,e.materialIndex)}const s=A.boundingBox;null!==s&&(this.boundingBox=s.clone());const o=A.boundingSphere;return null!==o&&(this.boundingSphere=o.clone()),this.drawRange.start=A.drawRange.start,this.drawRange.count=A.drawRange.count,this.userData=A.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const hr=new _n,wr=new Zn,Cr=new zn,dr=new Mn,Ir=new Mn,Mr=new Mn,pr=new Mn,mr=new Mn,Fr=new Mn,Dr=new Lt,Yr=new Lt,fr=new Lt,Nr=new Mn,Ur=new Mn,yr=new Mn,Tr=new Mn,xr=new Mn;class Rr extends pi{constructor(A=new ur,e=new Li){super(),this.isMesh=!0,this.type="Mesh",this.geometry=A,this.material=e,this.updateMorphTargets()}copy(A,e){return super.copy(A,e),void 0!==A.morphTargetInfluences&&(this.morphTargetInfluences=A.morphTargetInfluences.slice()),void 0!==A.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},A.morphTargetDictionary)),this.material=A.material,this.geometry=A.geometry,this}updateMorphTargets(){const A=this.geometry.morphAttributes,e=Object.keys(A);if(e.length>0){const t=A[e[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let A=0,e=t.length;A<e;A++){const e=t[A].name||String(A);this.morphTargetInfluences.push(0),this.morphTargetDictionary[e]=A}}}}getVertexPosition(A,e){const t=this.geometry,n=t.attributes.position,i=t.morphAttributes.position,r=t.morphTargetsRelative;e.fromBufferAttribute(n,A);const s=this.morphTargetInfluences;if(i&&s){Fr.set(0,0,0);for(let t=0,n=i.length;t<n;t++){const n=s[t],o=i[t];0!==n&&(mr.fromBufferAttribute(o,A),r?Fr.addScaledVector(mr,n):Fr.addScaledVector(mr.sub(e),n))}e.add(Fr)}return e}raycast(A,e){const t=this.geometry,n=this.material,i=this.matrixWorld;if(void 0!==n){if(null===t.boundingSphere&&t.computeBoundingSphere(),Cr.copy(t.boundingSphere),Cr.applyMatrix4(i),wr.copy(A.ray).recast(A.near),!1===Cr.containsPoint(wr.origin)){if(null===wr.intersectSphere(Cr,dr))return;if(wr.origin.distanceToSquared(dr)>(A.far-A.near)**2)return}hr.copy(i).invert(),wr.copy(A.ray).applyMatrix4(hr),null!==t.boundingBox&&!1===wr.intersectsBox(t.boundingBox)||this._computeIntersections(A,e,wr)}}_computeIntersections(A,e,t){let n;const i=this.geometry,r=this.material,s=i.index,o=i.attributes.position,a=i.attributes.uv,B=i.attributes.uv1,c=i.attributes.normal,g=i.groups,E=i.drawRange;if(null!==s)if(Array.isArray(r))for(let i=0,o=g.length;i<o;i++){const o=g[i],Q=r[o.materialIndex];for(let i=Math.max(o.start,E.start),r=Math.min(s.count,Math.min(o.start+o.count,E.start+E.count));i<r;i+=3){n=Gr(this,Q,A,t,a,B,c,s.getX(i),s.getX(i+1),s.getX(i+2)),n&&(n.faceIndex=Math.floor(i/3),n.face.materialIndex=o.materialIndex,e.push(n))}}else{for(let i=Math.max(0,E.start),o=Math.min(s.count,E.start+E.count);i<o;i+=3){n=Gr(this,r,A,t,a,B,c,s.getX(i),s.getX(i+1),s.getX(i+2)),n&&(n.faceIndex=Math.floor(i/3),e.push(n))}}else if(void 0!==o)if(Array.isArray(r))for(let i=0,s=g.length;i<s;i++){const s=g[i],Q=r[s.materialIndex];for(let i=Math.max(s.start,E.start),r=Math.min(o.count,Math.min(s.start+s.count,E.start+E.count));i<r;i+=3){n=Gr(this,Q,A,t,a,B,c,i,i+1,i+2),n&&(n.faceIndex=Math.floor(i/3),n.face.materialIndex=s.materialIndex,e.push(n))}}else{for(let i=Math.max(0,E.start),s=Math.min(o.count,E.start+E.count);i<s;i+=3){n=Gr(this,r,A,t,a,B,c,i,i+1,i+2),n&&(n.faceIndex=Math.floor(i/3),e.push(n))}}}}function Gr(A,e,t,n,i,r,s,o,a,B){A.getVertexPosition(o,Ir),A.getVertexPosition(a,Mr),A.getVertexPosition(B,pr);const c=function(A,e,t,n,i,r,s,o){let a;if(a=e.side===u?n.intersectTriangle(s,r,i,!0,o):n.intersectTriangle(i,r,s,e.side===l,o),null===a)return null;xr.copy(o),xr.applyMatrix4(A.matrixWorld);const B=t.ray.origin.distanceTo(xr);return B<t.near||B>t.far?null:{distance:B,point:xr.clone(),object:A}}(A,e,t,n,Ir,Mr,pr,Tr);if(c){i&&(Dr.fromBufferAttribute(i,o),Yr.fromBufferAttribute(i,a),fr.fromBufferAttribute(i,B),c.uv=Gi.getInterpolation(Tr,Ir,Mr,pr,Dr,Yr,fr,new Lt)),r&&(Dr.fromBufferAttribute(r,o),Yr.fromBufferAttribute(r,a),fr.fromBufferAttribute(r,B),c.uv1=Gi.getInterpolation(Tr,Ir,Mr,pr,Dr,Yr,fr,new Lt),c.uv2=c.uv1),s&&(Nr.fromBufferAttribute(s,o),Ur.fromBufferAttribute(s,a),yr.fromBufferAttribute(s,B),c.normal=Gi.getInterpolation(Tr,Ir,Mr,pr,Nr,Ur,yr,new Mn),c.normal.dot(n.direction)>0&&c.normal.multiplyScalar(-1));const A={a:o,b:a,c:B,normal:new Mn,materialIndex:0};Gi.getNormal(Ir,Mr,pr,A.normal),c.face=A}return c}class Sr extends ur{constructor(A=1,e=1,t=1,n=1,i=1,r=1){super(),this.type="BoxGeometry",this.parameters={width:A,height:e,depth:t,widthSegments:n,heightSegments:i,depthSegments:r};const s=this;n=Math.floor(n),i=Math.floor(i),r=Math.floor(r);const o=[],a=[],B=[],c=[];let g=0,E=0;function Q(A,e,t,n,i,r,Q,l,u,h,w){const C=r/u,d=Q/h,I=r/2,M=Q/2,p=l/2,m=u+1,F=h+1;let D=0,Y=0;const f=new Mn;for(let r=0;r<F;r++){const s=r*d-M;for(let o=0;o<m;o++){const g=o*C-I;f[A]=g*n,f[e]=s*i,f[t]=p,a.push(f.x,f.y,f.z),f[A]=0,f[e]=0,f[t]=l>0?1:-1,B.push(f.x,f.y,f.z),c.push(o/u),c.push(1-r/h),D+=1}}for(let A=0;A<h;A++)for(let e=0;e<u;e++){const t=g+e+m*A,n=g+e+m*(A+1),i=g+(e+1)+m*(A+1),r=g+(e+1)+m*A;o.push(t,n,r),o.push(n,i,r),Y+=6}s.addGroup(E,Y,w),E+=Y,g+=D}Q("z","y","x",-1,-1,t,e,A,r,i,0),Q("z","y","x",1,-1,t,e,-A,r,i,1),Q("x","z","y",1,1,A,t,e,n,r,2),Q("x","z","y",1,-1,A,t,-e,n,r,3),Q("x","y","z",1,-1,A,e,t,n,i,4),Q("x","y","z",-1,-1,A,e,-t,n,i,5),this.setIndex(o),this.setAttribute("position",new sr(a,3)),this.setAttribute("normal",new sr(B,3)),this.setAttribute("uv",new sr(c,2))}copy(A){return super.copy(A),this.parameters=Object.assign({},A.parameters),this}static fromJSON(A){return new Sr(A.width,A.height,A.depth,A.widthSegments,A.heightSegments,A.depthSegments)}}function br(A){const e={};for(const t in A){e[t]={};for(const n in A[t]){const i=A[t][n];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture||i.isQuaternion)?i.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),e[t][n]=null):e[t][n]=i.clone():Array.isArray(i)?e[t][n]=i.slice():e[t][n]=i}}return e}function Hr(A){const e={};for(let t=0;t<A.length;t++){const n=br(A[t]);for(const A in n)e[A]=n[A]}return e}function kr(A){return null===A.getRenderTarget()?A.outputColorSpace:ze}const vr={clone:br,merge:Hr};class Jr extends bi{constructor(A){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==A&&this.setValues(A)}copy(A){return super.copy(A),this.fragmentShader=A.fragmentShader,this.vertexShader=A.vertexShader,this.uniforms=br(A.uniforms),this.uniformsGroups=function(A){const e=[];for(let t=0;t<A.length;t++)e.push(A[t].clone());return e}(A.uniformsGroups),this.defines=Object.assign({},A.defines),this.wireframe=A.wireframe,this.wireframeLinewidth=A.wireframeLinewidth,this.fog=A.fog,this.lights=A.lights,this.clipping=A.clipping,this.extensions=Object.assign({},A.extensions),this.glslVersion=A.glslVersion,this}toJSON(A){const e=super.toJSON(A);e.glslVersion=this.glslVersion,e.uniforms={};for(const t in this.uniforms){const n=this.uniforms[t].value;n&&n.isTexture?e.uniforms[t]={type:"t",value:n.toJSON(A).uuid}:n&&n.isColor?e.uniforms[t]={type:"c",value:n.getHex()}:n&&n.isVector2?e.uniforms[t]={type:"v2",value:n.toArray()}:n&&n.isVector3?e.uniforms[t]={type:"v3",value:n.toArray()}:n&&n.isVector4?e.uniforms[t]={type:"v4",value:n.toArray()}:n&&n.isMatrix3?e.uniforms[t]={type:"m3",value:n.toArray()}:n&&n.isMatrix4?e.uniforms[t]={type:"m4",value:n.toArray()}:e.uniforms[t]={value:n}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader,e.lights=this.lights,e.clipping=this.clipping;const t={};for(const A in this.extensions)!0===this.extensions[A]&&(t[A]=!0);return Object.keys(t).length>0&&(e.extensions=t),e}}class jr extends pi{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new _n,this.projectionMatrix=new _n,this.projectionMatrixInverse=new _n,this.coordinateSystem=Yt}copy(A,e){return super.copy(A,e),this.matrixWorldInverse.copy(A.matrixWorldInverse),this.projectionMatrix.copy(A.projectionMatrix),this.projectionMatrixInverse.copy(A.projectionMatrixInverse),this.coordinateSystem=A.coordinateSystem,this}getWorldDirection(A){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return A.set(-e[8],-e[9],-e[10]).normalize()}updateMatrixWorld(A){super.updateMatrixWorld(A),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(A,e){super.updateWorldMatrix(A,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}class zr extends jr{constructor(A=50,e=1,t=.1,n=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=A,this.zoom=1,this.near=t,this.far=n,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(A,e){return super.copy(A,e),this.fov=A.fov,this.zoom=A.zoom,this.near=A.near,this.far=A.far,this.focus=A.focus,this.aspect=A.aspect,this.view=null===A.view?null:Object.assign({},A.view),this.filmGauge=A.filmGauge,this.filmOffset=A.filmOffset,this}setFocalLength(A){const e=.5*this.getFilmHeight()/A;this.fov=2*xt*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const A=Math.tan(.5*Tt*this.fov);return.5*this.getFilmHeight()/A}getEffectiveFOV(){return 2*xt*Math.atan(Math.tan(.5*Tt*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(A,e,t,n,i,r){this.aspect=A/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=A,this.view.fullHeight=e,this.view.offsetX=t,this.view.offsetY=n,this.view.width=i,this.view.height=r,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const A=this.near;let e=A*Math.tan(.5*Tt*this.fov)/this.zoom,t=2*e,n=this.aspect*t,i=-.5*n;const r=this.view;if(null!==this.view&&this.view.enabled){const A=r.fullWidth,s=r.fullHeight;i+=r.offsetX*n/A,e-=r.offsetY*t/s,n*=r.width/A,t*=r.height/s}const s=this.filmOffset;0!==s&&(i+=A*s/this.getFilmWidth()),this.projectionMatrix.makePerspective(i,i+n,e,e-t,A,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(A){const e=super.toJSON(A);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}class Lr extends pi{constructor(A,e,t){super(),this.type="CubeCamera",this.renderTarget=t,this.coordinateSystem=null;const n=new zr(-90,1,A,e);n.layers=this.layers,this.add(n);const i=new zr(-90,1,A,e);i.layers=this.layers,this.add(i);const r=new zr(-90,1,A,e);r.layers=this.layers,this.add(r);const s=new zr(-90,1,A,e);s.layers=this.layers,this.add(s);const o=new zr(-90,1,A,e);o.layers=this.layers,this.add(o);const a=new zr(-90,1,A,e);a.layers=this.layers,this.add(a)}updateCoordinateSystem(){const A=this.coordinateSystem,e=this.children.concat(),[t,n,i,r,s,o]=e;for(const A of e)this.remove(A);if(A===Yt)t.up.set(0,1,0),t.lookAt(1,0,0),n.up.set(0,1,0),n.lookAt(-1,0,0),i.up.set(0,0,-1),i.lookAt(0,1,0),r.up.set(0,0,1),r.lookAt(0,-1,0),s.up.set(0,1,0),s.lookAt(0,0,1),o.up.set(0,1,0),o.lookAt(0,0,-1);else{if(A!==ft)throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+A);t.up.set(0,-1,0),t.lookAt(-1,0,0),n.up.set(0,-1,0),n.lookAt(1,0,0),i.up.set(0,0,1),i.lookAt(0,1,0),r.up.set(0,0,-1),r.lookAt(0,-1,0),s.up.set(0,-1,0),s.lookAt(0,0,1),o.up.set(0,-1,0),o.lookAt(0,0,-1)}for(const A of e)this.add(A),A.updateMatrixWorld()}update(A,e){null===this.parent&&this.updateMatrixWorld();const t=this.renderTarget;this.coordinateSystem!==A.coordinateSystem&&(this.coordinateSystem=A.coordinateSystem,this.updateCoordinateSystem());const[n,i,r,s,o,a]=this.children,B=A.getRenderTarget(),c=A.toneMapping,g=A.xr.enabled;A.toneMapping=_,A.xr.enabled=!1;const E=t.texture.generateMipmaps;t.texture.generateMipmaps=!1,A.setRenderTarget(t,0),A.render(e,n),A.setRenderTarget(t,1),A.render(e,i),A.setRenderTarget(t,2),A.render(e,r),A.setRenderTarget(t,3),A.render(e,s),A.setRenderTarget(t,4),A.render(e,o),t.texture.generateMipmaps=E,A.setRenderTarget(t,5),A.render(e,a),A.setRenderTarget(B),A.toneMapping=c,A.xr.enabled=g,t.texture.needsPMREMUpdate=!0}}class Pr extends En{constructor(A,e,t,n,i,r,s,o,a,B){super(A=void 0!==A?A:[],e=void 0!==e?e:iA,t,n,i,r,s,o,a,B),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(A){this.image=A}}class Or extends ln{constructor(A=1,e={}){super(A,A,e),this.isWebGLCubeRenderTarget=!0;const t={width:A,height:A,depth:1},n=[t,t,t,t,t,t];void 0!==e.encoding&&(_t("THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace."),e.colorSpace=e.encoding===Se?je:Je),this.texture=new Pr(n,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==e.generateMipmaps&&e.generateMipmaps,this.texture.minFilter=void 0!==e.minFilter?e.minFilter:wA}fromEquirectangularTexture(A,e){this.texture.type=e.type,this.texture.colorSpace=e.colorSpace,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const t={uniforms:{tEquirect:{value:null}},vertexShader:"\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",fragmentShader:"\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t"},n=new Sr(5,5,5),i=new Jr({name:"CubemapFromEquirect",uniforms:br(t.uniforms),vertexShader:t.vertexShader,fragmentShader:t.fragmentShader,side:u,blending:C});i.uniforms.tEquirect.value=e;const r=new Rr(n,i),s=e.minFilter;e.minFilter===IA&&(e.minFilter=wA);return new Lr(1,10,this).update(A,r),e.minFilter=s,r.geometry.dispose(),r.material.dispose(),this}clear(A,e,t,n){const i=A.getRenderTarget();for(let i=0;i<6;i++)A.setRenderTarget(this,i),A.clear(e,t,n);A.setRenderTarget(i)}}const Wr=new Mn,Vr=new Mn,Kr=new Pt;class Xr{constructor(A=new Mn(1,0,0),e=0){this.isPlane=!0,this.normal=A,this.constant=e}set(A,e){return this.normal.copy(A),this.constant=e,this}setComponents(A,e,t,n){return this.normal.set(A,e,t),this.constant=n,this}setFromNormalAndCoplanarPoint(A,e){return this.normal.copy(A),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(A,e,t){const n=Wr.subVectors(t,e).cross(Vr.subVectors(A,e)).normalize();return this.setFromNormalAndCoplanarPoint(n,A),this}copy(A){return this.normal.copy(A.normal),this.constant=A.constant,this}normalize(){const A=1/this.normal.length();return this.normal.multiplyScalar(A),this.constant*=A,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(A){return this.normal.dot(A)+this.constant}distanceToSphere(A){return this.distanceToPoint(A.center)-A.radius}projectPoint(A,e){return e.copy(A).addScaledVector(this.normal,-this.distanceToPoint(A))}intersectLine(A,e){const t=A.delta(Wr),n=this.normal.dot(t);if(0===n)return 0===this.distanceToPoint(A.start)?e.copy(A.start):null;const i=-(A.start.dot(this.normal)+this.constant)/n;return i<0||i>1?null:e.copy(A.start).addScaledVector(t,i)}intersectsLine(A){const e=this.distanceToPoint(A.start),t=this.distanceToPoint(A.end);return e<0&&t>0||t<0&&e>0}intersectsBox(A){return A.intersectsPlane(this)}intersectsSphere(A){return A.intersectsPlane(this)}coplanarPoint(A){return A.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(A,e){const t=e||Kr.getNormalMatrix(A),n=this.coplanarPoint(Wr).applyMatrix4(A),i=this.normal.applyMatrix3(t).normalize();return this.constant=-n.dot(i),this}translate(A){return this.constant-=A.dot(this.normal),this}equals(A){return A.normal.equals(this.normal)&&A.constant===this.constant}clone(){return(new this.constructor).copy(this)}}const Zr=new zn,_r=new Mn;class qr{constructor(A=new Xr,e=new Xr,t=new Xr,n=new Xr,i=new Xr,r=new Xr){this.planes=[A,e,t,n,i,r]}set(A,e,t,n,i,r){const s=this.planes;return s[0].copy(A),s[1].copy(e),s[2].copy(t),s[3].copy(n),s[4].copy(i),s[5].copy(r),this}copy(A){const e=this.planes;for(let t=0;t<6;t++)e[t].copy(A.planes[t]);return this}setFromProjectionMatrix(A,e=Yt){const t=this.planes,n=A.elements,i=n[0],r=n[1],s=n[2],o=n[3],a=n[4],B=n[5],c=n[6],g=n[7],E=n[8],Q=n[9],l=n[10],u=n[11],h=n[12],w=n[13],C=n[14],d=n[15];if(t[0].setComponents(o-i,g-a,u-E,d-h).normalize(),t[1].setComponents(o+i,g+a,u+E,d+h).normalize(),t[2].setComponents(o+r,g+B,u+Q,d+w).normalize(),t[3].setComponents(o-r,g-B,u-Q,d-w).normalize(),t[4].setComponents(o-s,g-c,u-l,d-C).normalize(),e===Yt)t[5].setComponents(o+s,g+c,u+l,d+C).normalize();else{if(e!==ft)throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+e);t[5].setComponents(s,c,l,C).normalize()}return this}intersectsObject(A){if(void 0!==A.boundingSphere)null===A.boundingSphere&&A.computeBoundingSphere(),Zr.copy(A.boundingSphere).applyMatrix4(A.matrixWorld);else{const e=A.geometry;null===e.boundingSphere&&e.computeBoundingSphere(),Zr.copy(e.boundingSphere).applyMatrix4(A.matrixWorld)}return this.intersectsSphere(Zr)}intersectsSprite(A){return Zr.center.set(0,0,0),Zr.radius=.7071067811865476,Zr.applyMatrix4(A.matrixWorld),this.intersectsSphere(Zr)}intersectsSphere(A){const e=this.planes,t=A.center,n=-A.radius;for(let A=0;A<6;A++){if(e[A].distanceToPoint(t)<n)return!1}return!0}intersectsBox(A){const e=this.planes;for(let t=0;t<6;t++){const n=e[t];if(_r.x=n.normal.x>0?A.max.x:A.min.x,_r.y=n.normal.y>0?A.max.y:A.min.y,_r.z=n.normal.z>0?A.max.z:A.min.z,n.distanceToPoint(_r)<0)return!1}return!0}containsPoint(A){const e=this.planes;for(let t=0;t<6;t++)if(e[t].distanceToPoint(A)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}function $r(){let A=null,e=!1,t=null,n=null;function i(e,r){t(e,r),n=A.requestAnimationFrame(i)}return{start:function(){!0!==e&&null!==t&&(n=A.requestAnimationFrame(i),e=!0)},stop:function(){A.cancelAnimationFrame(n),e=!1},setAnimationLoop:function(A){t=A},setContext:function(e){A=e}}}function As(A,e){const t=e.isWebGL2,n=new WeakMap;return{get:function(A){return A.isInterleavedBufferAttribute&&(A=A.data),n.get(A)},remove:function(e){e.isInterleavedBufferAttribute&&(e=e.data);const t=n.get(e);t&&(A.deleteBuffer(t.buffer),n.delete(e))},update:function(e,i){if(e.isGLBufferAttribute){const A=n.get(e);return void((!A||A.version<e.version)&&n.set(e,{buffer:e.buffer,type:e.type,bytesPerElement:e.elementSize,version:e.version}))}e.isInterleavedBufferAttribute&&(e=e.data);const r=n.get(e);void 0===r?n.set(e,function(e,n){const i=e.array,r=e.usage,s=A.createBuffer();let o;if(A.bindBuffer(n,s),A.bufferData(n,i,r),e.onUploadCallback(),i instanceof Float32Array)o=A.FLOAT;else if(i instanceof Uint16Array)if(e.isFloat16BufferAttribute){if(!t)throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");o=A.HALF_FLOAT}else o=A.UNSIGNED_SHORT;else if(i instanceof Int16Array)o=A.SHORT;else if(i instanceof Uint32Array)o=A.UNSIGNED_INT;else if(i instanceof Int32Array)o=A.INT;else if(i instanceof Int8Array)o=A.BYTE;else if(i instanceof Uint8Array)o=A.UNSIGNED_BYTE;else{if(!(i instanceof Uint8ClampedArray))throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+i);o=A.UNSIGNED_BYTE}return{buffer:s,type:o,bytesPerElement:i.BYTES_PER_ELEMENT,version:e.version}}(e,i)):r.version<e.version&&(!function(e,n,i){const r=n.array,s=n.updateRange;A.bindBuffer(i,e),-1===s.count?A.bufferSubData(i,0,r):(t?A.bufferSubData(i,s.offset*r.BYTES_PER_ELEMENT,r,s.offset,s.count):A.bufferSubData(i,s.offset*r.BYTES_PER_ELEMENT,r.subarray(s.offset,s.offset+s.count)),s.count=-1),n.onUploadCallback()}(r.buffer,e,i),r.version=e.version)}}}class es extends ur{constructor(A=1,e=1,t=1,n=1){super(),this.type="PlaneGeometry",this.parameters={width:A,height:e,widthSegments:t,heightSegments:n};const i=A/2,r=e/2,s=Math.floor(t),o=Math.floor(n),a=s+1,B=o+1,c=A/s,g=e/o,E=[],Q=[],l=[],u=[];for(let A=0;A<B;A++){const e=A*g-r;for(let t=0;t<a;t++){const n=t*c-i;Q.push(n,-e,0),l.push(0,0,1),u.push(t/s),u.push(1-A/o)}}for(let A=0;A<o;A++)for(let e=0;e<s;e++){const t=e+a*A,n=e+a*(A+1),i=e+1+a*(A+1),r=e+1+a*A;E.push(t,n,r),E.push(n,i,r)}this.setIndex(E),this.setAttribute("position",new sr(Q,3)),this.setAttribute("normal",new sr(l,3)),this.setAttribute("uv",new sr(u,2))}copy(A){return super.copy(A),this.parameters=Object.assign({},A.parameters),this}static fromJSON(A){return new es(A.width,A.height,A.widthSegments,A.heightSegments)}}const ts={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif",alphatest_pars_fragment:"#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"float G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n} // validated",iridescence_fragment:"#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\t return vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat R21 = R12;\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vBumpMapUv );\n\t\tvec2 dSTdy = dFdy( vBumpMapUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = dFdx( surf_pos.xyz );\n\t\tvec3 vSigmaY = dFdy( surf_pos.xyz );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n\tconst vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n\treturn dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_v0 0.339\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_v1 0.276\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_v4 0.046\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_v5 0.016\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_v6 0.0038\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"vec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#ifdef USE_ENVMAP\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\t#ifdef USE_ANISOTROPY\n\t\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n\t\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\t\tvec3 bentNormal = cross( bitangent, viewDir );\n\t\t\t\tbentNormal = normalize( cross( bentNormal, bitangent ) );\n\t\t\t\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n\t\t\t\treturn getIBLRadiance( viewDir, bentNormal, roughness );\n\t\t\t#else\n\t\t\t\treturn vec3( 0.0 );\n\t\t\t#endif\n\t\t}\n\t#endif\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_fragment:"LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;",lights_lambert_pars_fragment:"varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( LEGACY_LIGHTS )\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#else\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef USE_SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULAR_COLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n\t\t#endif\n\t\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\t#ifdef USE_ANISOTROPYMAP\n\t\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n\t\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n\t\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n\t#else\n\t\tvec2 anisotropyV = anisotropyVector;\n\t#endif\n\tmaterial.anisotropy = length( anisotropyV );\n\tanisotropyV /= material.anisotropy;\n\tmaterial.anisotropy = saturate( material.anisotropy );\n\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x - tbn[ 1 ] * anisotropyV.y;\n\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x + tbn[ 0 ] * anisotropyV.y;\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat anisotropy;\n\t\tfloat alphaT;\n\t\tvec3 anisotropyT;\n\t\tvec3 anisotropyB;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n\t\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n\t\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n\t\tfloat v = 0.5 / ( gv + gl );\n\t\treturn saturate(v);\n\t}\n\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n\t\tfloat a2 = alphaT * alphaB;\n\t\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n\t\thighp float v2 = dot( v, v );\n\t\tfloat w2 = a2 / v2;\n\t\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\n\t}\n#endif\n#ifdef USE_CLEARCOAT\n\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n\t\tvec3 f0 = material.clearcoatF0;\n\t\tfloat f90 = material.clearcoatF90;\n\t\tfloat roughness = material.clearcoatRoughness;\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n\tvec3 f0 = material.specularColor;\n\tfloat f90 = material.specularF90;\n\tfloat roughness = material.roughness;\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t#ifdef USE_IRIDESCENCE\n\t\tF = mix( F, material.iridescenceFresnel, material.iridescence );\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat dotTL = dot( material.anisotropyT, lightDir );\n\t\tfloat dotTV = dot( material.anisotropyT, viewDir );\n\t\tfloat dotTH = dot( material.anisotropyT, halfDir );\n\t\tfloat dotBL = dot( material.anisotropyB, lightDir );\n\t\tfloat dotBV = dot( material.anisotropyB, viewDir );\n\t\tfloat dotBH = dot( material.anisotropyB, halfDir );\n\t\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n\t\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n\t#else\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t#endif\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometry.viewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\t#ifdef USE_ANISOTROPY\n\t\tradiance += getIBLAnisotropyRadiance( geometry.viewDir, geometry.normal, material.roughness, material.anisotropyB, material.anisotropy );\n\t#else\n\t\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, vMapUv );\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t#if defined( USE_POINTS_UV )\n\t\tvec2 uv = vUv;\n\t#else\n\t\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_POINTS_UV )\n\tvarying vec2 vUv;\n#else\n\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t\tuniform mat3 uvTransform;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphcolor_vertex:"#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform ivec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal *= faceDirection;\n\t#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn = getTangentFrame( - vViewPosition, normal, vNormalMapUv );\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn[0] *= faceDirection;\n\t\ttbn[1] *= faceDirection;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn2[0] *= faceDirection;\n\t\ttbn2[1] *= faceDirection;\n\t#endif\n#endif\nvec3 geometryNormal = normal;",normal_fragment_maps:"#ifdef USE_NORMALMAP_OBJECTSPACE\n\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\tnormal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normal_pars_fragment:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_pars_vertex:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_vertex:"#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( uv.st );\n\t\tvec2 st1 = dFdy( uv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n\t\treturn mat3( T * scale, B * scale, N );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif",iridescence_pars_fragment:"#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif",output_fragment:"#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n\treturn packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n\treturn unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * depth - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#if NUM_SPOT_LIGHT_COORDS > 0\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n\t\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#if NUM_SPOT_LIGHT_COORDS > 0\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\tvec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tuniform int boneTextureSize;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tfloat j = i * 4.0;\n\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\ty = dy * ( y + 0.5 );\n\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\treturn bone;\n\t}\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmission_fragment:"#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmitted = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif",transmission_pars_fragment:"#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tfloat w0( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n\t}\n\tfloat w1( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n\t}\n\tfloat w2( float a ){\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n\t}\n\tfloat w3( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * a * a );\n\t}\n\tfloat g0( float a ) {\n\t\treturn w0( a ) + w1( a );\n\t}\n\tfloat g1( float a ) {\n\t\treturn w2( a ) + w3( a );\n\t}\n\tfloat h0( float a ) {\n\t\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n\t}\n\tfloat h1( float a ) {\n\t\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n\t}\n\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n\t\tuv = uv * texelSize.zw + 0.5;\n\t\tvec2 iuv = floor( uv );\n\t\tvec2 fuv = fract( uv );\n\t\tfloat g0x = g0( fuv.x );\n\t\tfloat g1x = g1( fuv.x );\n\t\tfloat h0x = h0( fuv.x );\n\t\tfloat h1x = h1( fuv.x );\n\t\tfloat h0y = h0( fuv.y );\n\t\tfloat h1y = h1( fuv.y );\n\t\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n\t\t\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n\t}\n\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n\t\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n\t\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n\t\tvec2 fLodSizeInv = 1.0 / fLodSize;\n\t\tvec2 cLodSizeInv = 1.0 / cLodSize;\n\t\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n\t\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n\t\treturn mix( fSample, cSample, fract( lod ) );\n\t}\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n\t}\n\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn vec3( 1.0 );\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n\t}\n#endif",uv_pars_fragment:"#ifdef USE_UV\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif",uv_pars_vertex:"#ifdef USE_UV\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tuniform mat3 mapTransform;\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform mat3 alphaMapTransform;\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tuniform mat3 lightMapTransform;\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tuniform mat3 aoMapTransform;\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tuniform mat3 bumpMapTransform;\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tuniform mat3 normalMapTransform;\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tuniform mat3 displacementMapTransform;\n\tvarying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tuniform mat3 emissiveMapTransform;\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tuniform mat3 metalnessMapTransform;\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tuniform mat3 roughnessMapTransform;\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tuniform mat3 anisotropyMapTransform;\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tuniform mat3 clearcoatMapTransform;\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform mat3 clearcoatNormalMapTransform;\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform mat3 clearcoatRoughnessMapTransform;\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tuniform mat3 sheenColorMapTransform;\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tuniform mat3 sheenRoughnessMapTransform;\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tuniform mat3 iridescenceMapTransform;\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform mat3 iridescenceThicknessMapTransform;\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tuniform mat3 specularMapTransform;\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tuniform mat3 specularColorMapTransform;\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tuniform mat3 specularIntensityMapTransform;\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif",uv_vertex:"#ifdef USE_UV\n\tvUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#end
